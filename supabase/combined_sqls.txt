===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\add-decrement-function.sql ===== 
-- Function to decrement daily count atomically (for undo functionality)
CREATE OR REPLACE FUNCTION decrement_daily_count(p_user_id UUID)
RETURNS INTEGER AS $$
DECLARE
    current_count INTEGER;
BEGIN
    -- Update the daily count, ensuring it doesn't go below 0
    UPDATE user_sessions 
    SET 
        daily_count = GREATEST(daily_count - 1, 0),
        updated_at = NOW()
    WHERE user_id = p_user_id AND date = CURRENT_DATE
    RETURNING daily_count INTO current_count;
    
    -- If no record exists for today, return 0
    IF current_count IS NULL THEN
        current_count := 0;
    END IF;
    
    RETURN current_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant execute permission
GRANT EXECUTE ON FUNCTION decrement_daily_count(UUID) TO anon, authenticated;

-- Add comment for documentation
COMMENT ON FUNCTION decrement_daily_count(UUID) IS 'Atomically decrement daily API call count for undo functionality';
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\add-decrement-function.sql ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\add-token-balance.sql ===== 
-- Add token_balance column to users table
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS token_balance INTEGER DEFAULT 0;

-- Function to add tokens (for testing/debugging)
CREATE OR REPLACE FUNCTION add_tokens(p_user_id UUID, p_tokens INTEGER)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  new_balance INTEGER;
BEGIN
  UPDATE users
  SET token_balance = token_balance + p_tokens
  WHERE id = p_user_id
  RETURNING token_balance INTO new_balance;
  
  RETURN COALESCE(new_balance, 0);
END;
$$;

-- Function to consume a token
CREATE OR REPLACE FUNCTION consume_token(p_user_id UUID)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  current_balance INTEGER;
BEGIN
  -- Get current balance and decrement if positive
  UPDATE users
  SET token_balance = GREATEST(0, token_balance - 1)
  WHERE id = p_user_id AND token_balance > 0
  RETURNING token_balance INTO current_balance;
  
  -- Return true if we successfully consumed a token
  RETURN current_balance IS NOT NULL;
END;
$$;

-- Function to get user's token balance
CREATE OR REPLACE FUNCTION get_token_balance(p_user_id UUID)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  balance INTEGER;
BEGIN
  SELECT token_balance INTO balance
  FROM users
  WHERE id = p_user_id;
  
  RETURN COALESCE(balance, 0);
END;
$$;
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\add-token-balance.sql ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\auth-schema-updates.sql ===== 
-- Authentication Schema Updates for LLM Alchemy
-- Run this in your Supabase SQL editor

-- Update users table to support email authentication
ALTER TABLE users ADD COLUMN IF NOT EXISTS email_verified BOOLEAN DEFAULT FALSE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS google_id TEXT UNIQUE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS display_name TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS avatar_url TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS upgraded_from_anonymous BOOLEAN DEFAULT FALSE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS anonymous_data_migrated BOOLEAN DEFAULT FALSE;

-- Create user profiles table for additional data
CREATE TABLE IF NOT EXISTS user_profiles (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  display_name TEXT,
  avatar_url TEXT,
  preferences JSONB DEFAULT '{}',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Enable RLS on user_profiles
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;

-- RLS policies for user_profiles
CREATE POLICY "Users can view their own profile" ON user_profiles
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own profile" ON user_profiles
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own profile" ON user_profiles
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create function to handle user profile creation
CREATE OR REPLACE FUNCTION handle_new_user_profile() 
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO user_profiles (user_id, display_name, avatar_url)
  VALUES (
    NEW.id,
    NEW.display_name,
    NEW.avatar_url
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create trigger for automatic profile creation
DROP TRIGGER IF EXISTS on_user_profile_created ON users;
CREATE TRIGGER on_user_profile_created
  AFTER INSERT ON users
  FOR EACH ROW EXECUTE FUNCTION handle_new_user_profile();

-- Function to migrate anonymous user data to registered account
CREATE OR REPLACE FUNCTION migrate_anonymous_data(
  p_anonymous_user_id UUID,
  p_registered_user_id UUID
) RETURNS BOOLEAN AS $$
DECLARE
  migration_success BOOLEAN := FALSE;
  table_exists BOOLEAN;
BEGIN
  -- Start transaction
  BEGIN
    -- Migrate game states (always exists)
    UPDATE game_states 
    SET user_id = p_registered_user_id 
    WHERE user_id = p_anonymous_user_id;
    
    -- Migrate user sessions (always exists)
    UPDATE user_sessions 
    SET user_id = p_registered_user_id 
    WHERE user_id = p_anonymous_user_id;
    
    -- Migrate user elements (if table exists)
    SELECT EXISTS (
      SELECT FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = 'user_elements'
    ) INTO table_exists;
    
    IF table_exists THEN
      UPDATE user_elements 
      SET user_id = p_registered_user_id 
      WHERE user_id = p_anonymous_user_id;
    END IF;
    
    -- Migrate user combinations (if table exists)
    SELECT EXISTS (
      SELECT FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = 'user_combinations'
    ) INTO table_exists;
    
    IF table_exists THEN
      UPDATE user_combinations 
      SET user_id = p_registered_user_id 
      WHERE user_id = p_anonymous_user_id;
    END IF;
    
    -- Migrate payments (if table exists)
    SELECT EXISTS (
      SELECT FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = 'payments'
    ) INTO table_exists;
    
    IF table_exists THEN
      UPDATE payments 
      SET user_id = p_registered_user_id 
      WHERE user_id = p_anonymous_user_id;
    END IF;
    
    -- Mark the registered user as having migrated data
    UPDATE users 
    SET 
      upgraded_from_anonymous = TRUE,
      anonymous_data_migrated = TRUE
    WHERE id = p_registered_user_id;
    
    -- Delete the anonymous user record
    DELETE FROM users WHERE id = p_anonymous_user_id AND is_anonymous = TRUE;
    
    migration_success := TRUE;
    
  EXCEPTION WHEN OTHERS THEN
    -- If any error occurs, rollback will happen automatically
    migration_success := FALSE;
    RAISE;
  END;
  
  RETURN migration_success;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get user authentication status
CREATE OR REPLACE FUNCTION get_user_auth_status(p_user_id UUID)
RETURNS TABLE(
  is_anonymous BOOLEAN,
  email_verified BOOLEAN,
  has_google_auth BOOLEAN,
  display_name TEXT
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    u.is_anonymous,
    u.email_verified,
    (u.google_id IS NOT NULL) AS has_google_auth,
    u.display_name
  FROM users u
  WHERE u.id = p_user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_google_id ON users(google_id);
CREATE INDEX IF NOT EXISTS idx_users_is_anonymous ON users(is_anonymous);
CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id);

-- Comments for documentation
COMMENT ON FUNCTION migrate_anonymous_data IS 'Migrates all data from anonymous user to registered user account';
COMMENT ON FUNCTION get_user_auth_status IS 'Returns authentication status for a user';
COMMENT ON TABLE user_profiles IS 'Extended user profile information';
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\auth-schema-updates.sql ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\consolidate-files.bat ===== 
@echo off
setlocal enabledelayedexpansion

:: Prompt user for search pattern
echo File Consolidator - Combines multiple files into one text file
echo.
set /p "pattern=Enter file pattern (e.g., *.txt, *.java, main.*, *.*): "

:: Ask whether to exclude media files (only for wildcard patterns)
set "excludeMedia=false"
echo.
if "%pattern%"=="*.*" (
    set /p "choice=Do you want to exclude common media files (jpg, png, mp3, etc)? [Y/N]: "
    if /I "!choice!"=="Y" set "excludeMedia=true"
) else (
    :: Check if pattern ends with .* (but not *.*)
    set "checkPattern=%pattern%"
    if "!checkPattern:~-2!"==".*" (
        set /p "choice=Do you want to exclude common media files? [Y/N]: "
        if /I "!choice!"=="Y" set "excludeMedia=true"
    )
)

:: Define media extensions to exclude
set "mediaExt=.png .jpg .jpeg .gif .ico .bmp .tiff .tif .svg .webp"
set "mediaExt=!mediaExt! .mp4 .mp3 .wav .avi .mkv .mov .flac .ogg .m4a .wma"
set "mediaExt=!mediaExt! .zip .rar .7z .tar .gz .exe .dll .bin .iso"
set "mediaExt=!mediaExt! .pdf .doc .docx .xls .xlsx .ppt .pptx"

:: Output filename
set "outputFile=combined_output.txt"

:: Remove existing output file
if exist "%outputFile%" del "%outputFile%"

:: Count files
set "fileCount=0"
set "skippedCount=0"

echo.
echo Processing files matching pattern: %pattern%
echo.

:: Process matching files
for /R %%F in (%pattern%) do (
    set "ext=%%~xF"
    set "includeFile=true"
    
    :: Skip if it's the output file itself
    if /I "%%~nxF"=="%outputFile%" set "includeFile=false"
    
    :: Check if we should exclude this file type
    if /I "!excludeMedia!"=="true" if "!includeFile!"=="true" (
        for %%M in (%mediaExt%) do (
            if /I "%%~xF"=="%%M" (
                set "includeFile=false"
                set /a skippedCount+=1
            )
        )
    )
    
    :: Add file to output
    if "!includeFile!"=="true" (
        echo Processing: %%~nxF
        echo ===== START: %%F ===== >> "%outputFile%"
        type "%%F" >> "%outputFile%" 2>nul
        echo. >> "%outputFile%"
        echo ===== END: %%F ===== >> "%outputFile%"
        echo. >> "%outputFile%"
        echo. >> "%outputFile%"
        set /a fileCount+=1
    )
)

:: Summary
echo.
echo ========================================
echo Done! Results saved to: %outputFile%
echo Files processed: !fileCount!
if !skippedCount! GTR 0 echo Files skipped (media/binary): !skippedCount!
echo ========================================
echo.
pause 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\consolidate-files.bat ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\fix-auth-database-issues.sql ===== 
-- Fix Authentication Database Issues
-- Run this in your Supabase SQL editor to fix all auth-related problems

-- Step 1: Add missing columns to users table
ALTER TABLE users ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ DEFAULT NOW();
ALTER TABLE users ADD COLUMN IF NOT EXISTS email_verified BOOLEAN DEFAULT FALSE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS google_id TEXT UNIQUE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS display_name TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS avatar_url TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS upgraded_from_anonymous BOOLEAN DEFAULT FALSE;
ALTER TABLE users ADD COLUMN IF NOT EXISTS anonymous_data_migrated BOOLEAN DEFAULT FALSE;

-- Step 2: Create user_auth_sessions table for session-based authentication
CREATE TABLE IF NOT EXISTS user_auth_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    session_token TEXT UNIQUE NOT NULL,
    expires_at TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    last_accessed TIMESTAMPTZ DEFAULT NOW()
);

-- Step 3: Drop existing problematic RLS policies
DROP POLICY IF EXISTS "Users can read own data" ON users;
DROP POLICY IF EXISTS "Users can update own data" ON users;
DROP POLICY IF EXISTS "Users can create own record" ON users;
DROP POLICY IF EXISTS "Users can manage own sessions" ON user_sessions;
DROP POLICY IF EXISTS "Users can manage own game states" ON game_states;
DROP POLICY IF EXISTS "Users can manage own discoveries" ON discovered_elements;

-- Step 4: Create new permissive policies for development
-- Note: These are more permissive for debugging - we'll tighten them later

-- Users table policies
CREATE POLICY "Allow all operations on users" ON users
    FOR ALL USING (true);

-- User sessions policies  
CREATE POLICY "Allow all operations on user_sessions" ON user_sessions
    FOR ALL USING (true);

-- Game states policies
CREATE POLICY "Allow all operations on game_states" ON game_states
    FOR ALL USING (true);

-- Discovered elements policies
CREATE POLICY "Allow all operations on discovered_elements" ON discovered_elements
    FOR ALL USING (true);

-- User auth sessions policies
ALTER TABLE user_auth_sessions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all operations on user_auth_sessions" ON user_auth_sessions
    FOR ALL USING (true);

-- Step 5: Create helper functions for session management
CREATE OR REPLACE FUNCTION create_user_session(p_user_id UUID)
RETURNS TEXT AS $$
DECLARE
    session_token TEXT;
    expires_at TIMESTAMPTZ;
BEGIN
    -- Generate a unique session token
    session_token := encode(gen_random_bytes(32), 'base64');
    
    -- Set expiration to 30 days from now
    expires_at := NOW() + INTERVAL '30 days';
    
    -- Insert the session
    INSERT INTO user_auth_sessions (user_id, session_token, expires_at)
    VALUES (p_user_id, session_token, expires_at);
    
    RETURN session_token;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION validate_user_session(p_session_token TEXT)
RETURNS UUID AS $$
DECLARE
    user_id UUID;
BEGIN
    -- Get user_id for valid, non-expired session
    SELECT s.user_id INTO user_id
    FROM user_auth_sessions s
    WHERE s.session_token = p_session_token 
    AND s.expires_at > NOW();
    
    -- Update last accessed time if session found
    IF user_id IS NOT NULL THEN
        UPDATE user_auth_sessions 
        SET last_accessed = NOW()
        WHERE session_token = p_session_token;
    END IF;
    
    RETURN user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION cleanup_expired_sessions()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    -- Delete expired sessions
    DELETE FROM user_auth_sessions 
    WHERE expires_at < NOW();
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Step 6: Update the users table trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Step 7: Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_user_auth_sessions_token ON user_auth_sessions(session_token);
CREATE INDEX IF NOT EXISTS idx_user_auth_sessions_user_id ON user_auth_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_auth_sessions_expires ON user_auth_sessions(expires_at);
CREATE INDEX IF NOT EXISTS idx_users_google_id ON users(google_id);
CREATE INDEX IF NOT EXISTS idx_users_email_verified ON users(email_verified);

-- Step 8: Grant permissions
GRANT ALL ON user_auth_sessions TO anon, authenticated;
GRANT EXECUTE ON FUNCTION create_user_session(UUID) TO anon, authenticated;
GRANT EXECUTE ON FUNCTION validate_user_session(TEXT) TO anon, authenticated;
GRANT EXECUTE ON FUNCTION cleanup_expired_sessions() TO anon, authenticated;

-- Step 9: Clean up any stuck auth state
-- Remove any existing auth sessions that might be causing issues
DELETE FROM auth.sessions;
DELETE FROM auth.users;

-- Comments
COMMENT ON TABLE user_auth_sessions IS 'Session tokens for custom authentication system';
COMMENT ON FUNCTION create_user_session(UUID) IS 'Creates a new session token for a user';
COMMENT ON FUNCTION validate_user_session(TEXT) IS 'Validates a session token and returns user_id';
COMMENT ON FUNCTION cleanup_expired_sessions() IS 'Removes expired session tokens';
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\fix-auth-database-issues.sql ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\fix-database-permissions.sql ===== 
-- Fix Database Permissions for LLM Alchemy
-- This addresses the 406 errors by granting proper permissions to anon and authenticated roles

-- Step 1: Grant full permissions to anon role (for anonymous users)
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO anon;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO anon;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO anon;

-- Step 2: Grant full permissions to authenticated role (for logged-in users)
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO authenticated;

-- Step 3: Grant usage on schema
GRANT USAGE ON SCHEMA public TO anon, authenticated;

-- Step 4: Set default privileges for future tables/functions
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO anon, authenticated;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO anon, authenticated;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT EXECUTE ON FUNCTIONS TO anon, authenticated;

-- Step 5: Verify permissions
DO $$
DECLARE
    table_record RECORD;
BEGIN
    RAISE NOTICE '=== VERIFYING TABLE PERMISSIONS ===';
    
    FOR table_record IN
        SELECT tablename 
        FROM pg_tables 
        WHERE schemaname = 'public'
        ORDER BY tablename
    LOOP
        RAISE NOTICE 'Table: % - Permissions granted to anon and authenticated roles', table_record.tablename;
    END LOOP;
    
    RAISE NOTICE '=== PERMISSIONS FIX COMPLETE ===';
    RAISE NOTICE 'All 406 errors should now be resolved';
END $$;
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\fix-database-permissions.sql ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\fix-rls-policies-final.sql ===== 
-- Final RLS Policy Fix for LLM Alchemy
-- This script will completely resolve 406 errors by fixing RLS policies

-- Step 1: Show current policies (for debugging)
DO $$
DECLARE
    rec RECORD;
BEGIN
    RAISE NOTICE '=== CURRENT RLS POLICIES ===';
    FOR rec IN 
        SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check
        FROM pg_policies 
        WHERE schemaname = 'public'
        ORDER BY tablename, policyname
    LOOP
        RAISE NOTICE 'Table: %, Policy: %, Command: %, Using: %', 
            rec.tablename, rec.policyname, rec.cmd, rec.qual;
    END LOOP;
END $$;

-- Step 2: Completely disable RLS on all tables (nuclear option)
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_sessions DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.game_states DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.discovered_elements DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_auth_sessions DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profiles DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.payments DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.subscriptions DISABLE ROW LEVEL SECURITY;

-- Step 3: Drop ALL existing policies
DROP POLICY IF EXISTS "Users can read own data" ON public.users;
DROP POLICY IF EXISTS "Users can update own data" ON public.users;
DROP POLICY IF EXISTS "Users can create own record" ON public.users;
DROP POLICY IF EXISTS "Users can manage own sessions" ON public.user_sessions;
DROP POLICY IF EXISTS "Users can manage own game states" ON public.game_states;
DROP POLICY IF EXISTS "Users can manage own discoveries" ON public.discovered_elements;
DROP POLICY IF EXISTS "Allow all operations on users" ON public.users;
DROP POLICY IF EXISTS "Allow all operations on user_sessions" ON public.user_sessions;
DROP POLICY IF EXISTS "Allow all operations on game_states" ON public.game_states;
DROP POLICY IF EXISTS "Allow all operations on discovered_elements" ON public.discovered_elements;
DROP POLICY IF EXISTS "Allow all operations on user_auth_sessions" ON public.user_auth_sessions;
DROP POLICY IF EXISTS "Users can view their own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can update their own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can insert their own profile" ON public.user_profiles;

-- Step 4: Re-enable RLS and create completely open policies
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.game_states ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.discovered_elements ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_auth_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;

-- Step 5: Create maximally permissive policies (for development)
CREATE POLICY "development_full_access" ON public.users FOR ALL TO public USING (true) WITH CHECK (true);
CREATE POLICY "development_full_access" ON public.user_sessions FOR ALL TO public USING (true) WITH CHECK (true);
CREATE POLICY "development_full_access" ON public.game_states FOR ALL TO public USING (true) WITH CHECK (true);
CREATE POLICY "development_full_access" ON public.discovered_elements FOR ALL TO public USING (true) WITH CHECK (true);
CREATE POLICY "development_full_access" ON public.user_auth_sessions FOR ALL TO public USING (true) WITH CHECK (true);
CREATE POLICY "development_full_access" ON public.user_profiles FOR ALL TO public USING (true) WITH CHECK (true);
CREATE POLICY "development_full_access" ON public.payments FOR ALL TO public USING (true) WITH CHECK (true);
CREATE POLICY "development_full_access" ON public.subscriptions FOR ALL TO public USING (true) WITH CHECK (true);

-- Step 6: Grant all permissions to anon and authenticated roles
GRANT ALL ON ALL TABLES IN SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO anon, authenticated;

-- Step 7: Verify policies are set correctly
DO $$
DECLARE
    rec RECORD;
BEGIN
    RAISE NOTICE '=== NEW RLS POLICIES ===';
    FOR rec IN 
        SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check
        FROM pg_policies 
        WHERE schemaname = 'public'
        ORDER BY tablename, policyname
    LOOP
        RAISE NOTICE 'Table: %, Policy: %, Command: %, Using: %', 
            rec.tablename, rec.policyname, rec.cmd, rec.qual;
    END LOOP;
END $$;

-- Step 8: Test data access
DO $$
DECLARE
    test_count INTEGER;
BEGIN
    RAISE NOTICE '=== TESTING DATA ACCESS ===';
    
    -- Test users table
    SELECT COUNT(*) INTO test_count FROM public.users;
    RAISE NOTICE 'Users table accessible: % records', test_count;
    
    -- Test other tables
    SELECT COUNT(*) INTO test_count FROM public.user_sessions;
    RAISE NOTICE 'User_sessions table accessible: % records', test_count;
    
    SELECT COUNT(*) INTO test_count FROM public.game_states;
    RAISE NOTICE 'Game_states table accessible: % records', test_count;
    
    RAISE NOTICE 'All tables should now be accessible!';
END $$;

RAISE NOTICE '=== RLS FIX COMPLETE ===';
RAISE NOTICE 'All 406 errors should now be resolved';
RAISE NOTICE 'Tables now have completely open access for development';
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\fix-rls-policies-final.sql ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\README.md ===== 
# Supabase Database Setup for LLM Alchemy

This directory contains the database schema and setup instructions for the LLM Alchemy game.

## Quick Setup

### 1. Create Supabase Project
1. Go to [supabase.com](https://supabase.com) and create a new project
2. Note down your project URL and anon key from the project settings

### 2. Environment Variables
Copy the Supabase credentials to your `.env.local` file:

```bash
# Add these to your .env.local file
NEXT_PUBLIC_SUPABASE_URL=https://your-project-id.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here
```

### 3. Deploy Database Schema
1. Open your Supabase project dashboard
2. Go to the SQL Editor
3. Copy and paste the contents of `schema.sql`
4. Click "Run" to execute the schema

### 4. Verify Setup
The schema will create these tables:
- `users` - User accounts (anonymous and registered)
- `user_sessions` - Daily usage tracking
- `game_states` - Persistent game progress
- `discovered_elements` - Optional global stats

## Database Schema Overview

### Tables

#### `users`
Stores user accounts with support for both anonymous and registered users.
- `id` - UUID primary key (matches Supabase auth.users.id)
- `email` - Optional email for registered users
- `is_anonymous` - Boolean flag for anonymous users
- `subscription_status` - 'free' or 'premium'
- `subscription_ends_at` - Premium subscription expiry

#### `user_sessions`
Tracks daily API usage for rate limiting.
- `user_id` - References users.id
- `date` - Date of usage
- `daily_count` - Number of API calls made
- Unique constraint on (user_id, date)

#### `game_states`
Persistent storage for game progress.
- `user_id` - References users.id
- `game_mode` - 'science' or 'creative'
- `elements` - JSONB array of discovered elements
- `end_elements` - JSONB array of end elements (science mode)
- `combinations` - JSONB object of tried combinations
- `achievements` - JSONB array of unlocked achievements
- Unique constraint on (user_id, game_mode)

#### `discovered_elements`
Optional table for global discovery statistics.
- `user_id` - References users.id
- `element_name` - Name of discovered element
- `discovered_at` - Timestamp of discovery
- Primary key on (user_id, element_name)

### Functions

#### `increment_daily_count(p_user_id UUID)`
Atomically increments the daily API call count for a user.
Returns the new count value.

#### `get_daily_count(p_user_id UUID)`
Gets the current daily API call count for a user.
Returns 0 if no record exists for today.

#### `reset_daily_counts()`
Cleans up old session data (older than 7 days).
Should be run daily via cron job.

### Row Level Security (RLS)

All tables have RLS enabled with policies that ensure:
- Users can only access their own data
- Anonymous users work seamlessly
- Data is properly isolated between users

## Migration from localStorage

The current implementation uses localStorage for daily counts. The database setup enables:

1. **Persistent daily counts** across devices and sessions
2. **Cross-device sync** for registered users  
3. **Anonymous user support** with optional upgrade path
4. **Game state persistence** for save/load functionality
5. **Foundation for subscription management**

## Next Steps

After setting up the database:

1. **Update API routes** to use Supabase instead of localStorage
2. **Implement game state persistence** (save/load)
3. **Add user registration flow** (magic link or social login)
4. **Implement subscription management** with Mollie payments
5. **Add analytics and user insights**

## Development Notes

- The schema includes Row Level Security for data protection
- Anonymous users are created automatically on first visit
- Game states are stored per user per game mode
- Daily counts reset automatically via date-based queries
- All operations are atomic to prevent race conditions

## Production Considerations

- Remove the test admin user from the schema
- Set up automated backups
- Configure appropriate connection pooling
- Monitor database performance and usage
- Set up the daily cleanup cron job for old session data
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\README.md ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\schema.sql ===== 
-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email TEXT UNIQUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    is_anonymous BOOLEAN DEFAULT true,
    subscription_status TEXT DEFAULT 'free' CHECK (subscription_status IN ('free', 'premium')),
    subscription_ends_at TIMESTAMPTZ
);

-- Create user_sessions table for daily limit tracking
CREATE TABLE IF NOT EXISTS user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    date DATE DEFAULT CURRENT_DATE,
    daily_count INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, date)
);

-- Create game_states table for persistent game progress
CREATE TABLE IF NOT EXISTS game_states (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    game_mode TEXT NOT NULL CHECK (game_mode IN ('science', 'creative')),
    elements JSONB DEFAULT '[]',
    end_elements JSONB DEFAULT '[]',
    combinations JSONB DEFAULT '{}',
    achievements JSONB DEFAULT '[]',
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, game_mode)
);

-- Create discovered_elements table for global stats (optional)
CREATE TABLE IF NOT EXISTS discovered_elements (
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    element_name TEXT NOT NULL,
    discovered_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (user_id, element_name)
);

-- Enable Row Level Security
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE game_states ENABLE ROW LEVEL SECURITY;
ALTER TABLE discovered_elements ENABLE ROW LEVEL SECURITY;

-- Create RLS Policies

-- Users can read and update their own data
CREATE POLICY "Users can read own data" ON users
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own data" ON users
    FOR UPDATE USING (auth.uid() = id);

-- Users can insert their own record (for anonymous user creation)
CREATE POLICY "Users can create own record" ON users
    FOR INSERT WITH CHECK (auth.uid() = id);

-- User sessions: users can manage their own session data
CREATE POLICY "Users can manage own sessions" ON user_sessions
    FOR ALL USING (auth.uid() = user_id);

-- Game states: users can manage their own game states
CREATE POLICY "Users can manage own game states" ON game_states
    FOR ALL USING (auth.uid() = user_id);

-- Discovered elements: users can manage their own discoveries
CREATE POLICY "Users can manage own discoveries" ON discovered_elements
    FOR ALL USING (auth.uid() = user_id);

-- Create database functions

-- Function to increment daily count atomically
CREATE OR REPLACE FUNCTION increment_daily_count(p_user_id UUID)
RETURNS INTEGER AS $$
DECLARE
    current_count INTEGER;
BEGIN
    INSERT INTO user_sessions (user_id, date, daily_count)
    VALUES (p_user_id, CURRENT_DATE, 1)
    ON CONFLICT (user_id, date)
    DO UPDATE SET 
        daily_count = user_sessions.daily_count + 1,
        updated_at = NOW()
    RETURNING daily_count INTO current_count;
    
    RETURN current_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get daily count for a user
CREATE OR REPLACE FUNCTION get_daily_count(p_user_id UUID)
RETURNS INTEGER AS $$
DECLARE
    current_count INTEGER;
BEGIN
    SELECT daily_count INTO current_count
    FROM user_sessions
    WHERE user_id = p_user_id AND date = CURRENT_DATE;
    
    RETURN COALESCE(current_count, 0);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to reset daily counts (can be called by cron job)
CREATE OR REPLACE FUNCTION reset_daily_counts()
RETURNS void AS $$
BEGIN
    -- Delete old session records (older than 7 days)
    DELETE FROM user_sessions 
    WHERE date < CURRENT_DATE - INTERVAL '7 days';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_user_sessions_user_date ON user_sessions(user_id, date);
CREATE INDEX IF NOT EXISTS idx_game_states_user_mode ON game_states(user_id, game_mode);
CREATE INDEX IF NOT EXISTS idx_discovered_elements_user ON discovered_elements(user_id);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email) WHERE email IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_users_subscription ON users(subscription_status, subscription_ends_at);

-- Grant necessary permissions
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO anon, authenticated;

-- Insert default admin user (optional, for testing)
-- Note: This should be removed in production
INSERT INTO users (id, email, is_anonymous, subscription_status) 
VALUES ('00000000-0000-0000-0000-000000000000', 'admin@llmalchemy.com', false, 'premium')
ON CONFLICT (id) DO NOTHING;

-- Comments for documentation
COMMENT ON TABLE users IS 'User accounts, both anonymous and registered';
COMMENT ON TABLE user_sessions IS 'Daily usage tracking for rate limiting';
COMMENT ON TABLE game_states IS 'Persistent game progress for each user and mode';
COMMENT ON TABLE discovered_elements IS 'Optional tracking of all discoveries for stats';
COMMENT ON FUNCTION increment_daily_count(UUID) IS 'Atomically increment daily API call count';
COMMENT ON FUNCTION get_daily_count(UUID) IS 'Get current daily API call count for user';
COMMENT ON FUNCTION reset_daily_counts() IS 'Cleanup old session data, should be run daily';
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\schema.sql ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\supabase\stripe-payment-schema.sql ===== 
-- Stripe Payment Schema for LLM Alchemy - Simplified Version
-- Run this in your Supabase SQL editor

-- Payments table - tracks all transactions (tokens + subscriptions)
CREATE TABLE IF NOT EXISTS payments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  stripe_session_id TEXT UNIQUE,
  stripe_payment_id TEXT,
  amount DECIMAL(10,2) NOT NULL,
  currency TEXT DEFAULT 'EUR',
  status TEXT NOT NULL, -- pending, paid, failed, canceled
  type TEXT NOT NULL, -- 'tokens' or 'subscription'
  tokens_granted INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Subscriptions table - tracks active subscriptions
CREATE TABLE IF NOT EXISTS subscriptions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID UNIQUE REFERENCES users(id) ON DELETE CASCADE,
  stripe_subscription_id TEXT UNIQUE,
  status TEXT NOT NULL, -- active, canceled, expired
  amount DECIMAL(10,2) NOT NULL,
  currency TEXT DEFAULT 'EUR',
  next_payment_date TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  canceled_at TIMESTAMP
);

-- Enable RLS
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE subscriptions ENABLE ROW LEVEL SECURITY;

-- Simple RLS policies
CREATE POLICY "Users can view their own payments" ON payments
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own subscriptions" ON subscriptions
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "System can manage payments" ON payments
  FOR ALL USING (true);

CREATE POLICY "System can manage subscriptions" ON subscriptions
  FOR ALL USING (true);

-- Essential indexes
CREATE INDEX IF NOT EXISTS idx_payments_user_id ON payments(user_id);
CREATE INDEX IF NOT EXISTS idx_payments_stripe_session_id ON payments(stripe_session_id);
CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON subscriptions(user_id);
CREATE INDEX IF NOT EXISTS idx_subscriptions_stripe_id ON subscriptions(stripe_subscription_id);

-- Function to create a payment record
CREATE OR REPLACE FUNCTION create_stripe_payment(
  p_user_id UUID,
  p_stripe_session_id TEXT,
  p_amount DECIMAL(10,2),
  p_currency TEXT,
  p_type TEXT,
  p_tokens_granted INTEGER DEFAULT 0
) RETURNS UUID AS $$
DECLARE
  payment_id UUID;
BEGIN
  INSERT INTO payments (
    user_id, stripe_session_id, amount, currency, status, type, tokens_granted
  ) VALUES (
    p_user_id, p_stripe_session_id, p_amount, p_currency, 'pending', p_type, p_tokens_granted
  ) RETURNING id INTO payment_id;
  
  RETURN payment_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to update payment status (called by webhook)
CREATE OR REPLACE FUNCTION update_stripe_payment_status(
  p_stripe_session_id TEXT,
  p_stripe_payment_id TEXT,
  p_status TEXT
) RETURNS BOOLEAN AS $$
DECLARE
  payment_record payments%ROWTYPE;
BEGIN
  -- Get the payment record
  SELECT * INTO payment_record FROM payments 
  WHERE stripe_session_id = p_stripe_session_id;
  
  IF NOT FOUND THEN
    RETURN FALSE;
  END IF;
  
  -- Update payment status
  UPDATE payments 
  SET 
    status = p_status,
    stripe_payment_id = p_stripe_payment_id,
    updated_at = NOW()
  WHERE stripe_session_id = p_stripe_session_id;
  
  -- If payment successful, grant tokens or activate subscription
  IF p_status = 'paid' THEN
    IF payment_record.type = 'tokens' AND payment_record.tokens_granted > 0 THEN
      -- Grant tokens
      UPDATE users 
      SET token_balance = COALESCE(token_balance, 0) + payment_record.tokens_granted
      WHERE id = payment_record.user_id;
      
    ELSIF payment_record.type = 'subscription' THEN
      -- Activate subscription
      UPDATE users 
      SET 
        subscription_status = 'premium',
        subscription_ends_at = NOW() + INTERVAL '1 month'
      WHERE id = payment_record.user_id;
      
      -- Create/update subscription record
      INSERT INTO subscriptions (
        user_id, status, amount, currency, next_payment_date
      ) VALUES (
        payment_record.user_id, 'active', payment_record.amount, payment_record.currency, 
        NOW() + INTERVAL '1 month'
      )
      ON CONFLICT (user_id) DO UPDATE SET
        status = 'active',
        next_payment_date = NOW() + INTERVAL '1 month',
        updated_at = NOW();
    END IF;
  END IF;
  
  RETURN TRUE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Auto-update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_payments_updated_at 
  BEFORE UPDATE ON payments 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_subscriptions_updated_at 
  BEFORE UPDATE ON subscriptions 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Comments
COMMENT ON TABLE payments IS 'All payment transactions (tokens and subscriptions)';
COMMENT ON TABLE subscriptions IS 'Active subscription tracking';
COMMENT ON FUNCTION create_stripe_payment IS 'Creates a new payment record';
COMMENT ON FUNCTION update_stripe_payment_status IS 'Updates payment status and grants tokens/subscription';
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\supabase\stripe-payment-schema.sql ===== 
 
 
