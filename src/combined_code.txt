===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\consolidate-files.bat ===== 
@echo off
setlocal enabledelayedexpansion

:: Prompt user for search pattern
echo File Consolidator - Combines multiple files into one text file
echo.
set /p "pattern=Enter file pattern (e.g., *.txt, *.java, main.*, *.*): "

:: Ask whether to exclude media files (only for wildcard patterns)
set "excludeMedia=false"
echo.
if "%pattern%"=="*.*" (
    set /p "choice=Do you want to exclude common media files (jpg, png, mp3, etc)? [Y/N]: "
    if /I "!choice!"=="Y" set "excludeMedia=true"
) else (
    :: Check if pattern ends with .* (but not *.*)
    set "checkPattern=%pattern%"
    if "!checkPattern:~-2!"==".*" (
        set /p "choice=Do you want to exclude common media files? [Y/N]: "
        if /I "!choice!"=="Y" set "excludeMedia=true"
    )
)

:: Define media extensions to exclude
set "mediaExt=.png .jpg .jpeg .gif .ico .bmp .tiff .tif .svg .webp"
set "mediaExt=!mediaExt! .mp4 .mp3 .wav .avi .mkv .mov .flac .ogg .m4a .wma"
set "mediaExt=!mediaExt! .zip .rar .7z .tar .gz .exe .dll .bin .iso"
set "mediaExt=!mediaExt! .pdf .doc .docx .xls .xlsx .ppt .pptx"

:: Output filename
set "outputFile=combined_output.txt"

:: Remove existing output file
if exist "%outputFile%" del "%outputFile%"

:: Count files
set "fileCount=0"
set "skippedCount=0"

echo.
echo Processing files matching pattern: %pattern%
echo.

:: Process matching files
for /R %%F in (%pattern%) do (
    set "ext=%%~xF"
    set "includeFile=true"
    
    :: Skip if it's the output file itself
    if /I "%%~nxF"=="%outputFile%" set "includeFile=false"
    
    :: Check if we should exclude this file type
    if /I "!excludeMedia!"=="true" if "!includeFile!"=="true" (
        for %%M in (%mediaExt%) do (
            if /I "%%~xF"=="%%M" (
                set "includeFile=false"
                set /a skippedCount+=1
            )
        )
    )
    
    :: Add file to output
    if "!includeFile!"=="true" (
        echo Processing: %%~nxF
        echo ===== START: %%F ===== >> "%outputFile%"
        type "%%F" >> "%outputFile%" 2>nul
        echo. >> "%outputFile%"
        echo ===== END: %%F ===== >> "%outputFile%"
        echo. >> "%outputFile%"
        echo. >> "%outputFile%"
        set /a fileCount+=1
    )
)

:: Summary
echo.
echo ========================================
echo Done! Results saved to: %outputFile%
echo Files processed: !fileCount!
if !skippedCount! GTR 0 echo Files skipped (media/binary): !skippedCount!
echo ========================================
echo.
pause 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\consolidate-files.bat ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\globals.css ===== 
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\globals.css ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\layout.tsx ===== 
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SupabaseProvider } from "@/components/auth/SupabaseProvider";

const geist = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "LLM Alchemy - AI Element Combination Game",
  description: "Discover new elements by combining existing ones using the power of AI. Choose between Science mode for realistic combinations or Creative mode for imaginative results!",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geist.variable} ${geistMono.variable} antialiased`}
      >
        <SupabaseProvider>
          {children}
        </SupabaseProvider>
      </body>
    </html>
  );
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\layout.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\page.tsx ===== 
'use client'

import { useRouter } from 'next/navigation';
import { useEffect } from 'react';
import { Sparkles } from 'lucide-react';
import { useSupabase } from '@/components/auth/SupabaseProvider';

export default function Home() {
  const { user, loading } = useSupabase();
  const router = useRouter();

  const handlePlayNow = () => {
    router.push('/game');
  };

  // Auto-redirect to game if already has user (anonymous users are created automatically)
  useEffect(() => {
    if (user && !loading) {
      router.push('/game');
    }
  }, [user, loading, router]);

  if (loading) {
    return (
      <main className="min-h-screen bg-gray-900 text-white flex items-center justify-center">
        <div className="text-xl">Loading...</div>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4">
      <div className="max-w-md w-full text-center">
        <div className="flex items-center justify-center gap-3 mb-8">
          <Sparkles className="text-yellow-400" size={48} />
          <h1 className="text-5xl font-bold">LLM Alchemy</h1>
        </div>
        
        <p className="text-lg text-gray-300 mb-8">
          Combine elements to discover new ones using the power of AI.
          Choose between Science mode for realistic combinations or Creative mode for imaginative results!
        </p>
        
        <div className="space-y-4">
          <button 
            onClick={handlePlayNow}
            className="block w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold py-4 px-8 rounded-lg transition-all transform hover:scale-105"
          >
            {user ? 'Continue Playing' : 'Play Now'}
          </button>
          
          <div className="text-sm text-gray-400">
            Free to play • 50 combinations per day
          </div>
        </div>
      </div>
    </main>
  );
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\page.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\api\generate\route.ts ===== 
import { NextRequest, NextResponse } from 'next/server';

const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OPENROUTER_URL = 'https://openrouter.ai/api/v1/chat/completions';

export async function POST(req: NextRequest) {
  try {
    const { prompt, gameMode } = await req.json();

    if (!OPENROUTER_API_KEY) {
      console.error('OpenRouter API key not configured');
      return NextResponse.json(
        { error: 'OpenRouter API key not configured' },
        { status: 500 }
      );
    }

    // Use Gemini Flash for cost-effective generation
    const model = gameMode === 'creative' ? 'google/gemini-2.5-flash' : 'google/gemini-2.5-flash';

    const response = await fetch(OPENROUTER_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',
        'X-Title': 'LLM Alchemy Game',
      },
      body: JSON.stringify({
        model,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 500,
        top_p: 0.9,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenRouter API error:', response.status, errorText);
      return NextResponse.json(
        { error: `OpenRouter API error: ${response.status}` },
        { status: response.status }
      );
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('Invalid response structure:', data);
      return NextResponse.json(
        { error: 'Invalid response from OpenRouter' },
        { status: 500 }
      );
    }

    const content = data.choices[0].message.content;
    
    // Parse the JSON response from the LLM
    let parsedResult;
    try {
      // Extract JSON from the response if it's wrapped in code blocks or other text
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsedResult = JSON.parse(jsonMatch[0]);
      } else {
        parsedResult = JSON.parse(content);
      }
    } catch (parseError) {
      console.error('Failed to parse LLM response:', content);
      console.error('Parse error:', parseError);
      
      // Fallback to null result
      return NextResponse.json({
        result: null,
        emoji: '❌',
        color: '#808080',
        rarity: 'common',
        reasoning: 'Failed to parse response',
        tags: [],
        isEndElement: false
      });
    }

    // Validate the parsed result
    const validatedResult = {
      result: parsedResult.result || null,
      emoji: parsedResult.emoji || '✨',
      color: parsedResult.color || '#808080',
      rarity: parsedResult.rarity || 'common',
      reasoning: parsedResult.reasoning || '',
      tags: Array.isArray(parsedResult.tags) ? parsedResult.tags : [],
      isEndElement: parsedResult.isEndElement || false
    };

    return NextResponse.json(validatedResult);

  } catch (error) {
    console.error('Generation error:', error);
    
    // Check if it's a network error
    if (error instanceof TypeError && error.message.includes('fetch')) {
      return NextResponse.json(
        { error: 'Network error: Unable to connect to OpenRouter' },
        { status: 503 }
      );
    }
    
    return NextResponse.json(
      { error: 'Failed to generate combination' },
      { status: 500 }
    );
  }
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\api\generate\route.ts ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\game\page.tsx ===== 
'use client';

import { useSupabase } from '@/components/auth/SupabaseProvider';
import dynamic from 'next/dynamic';

// Dynamic import to avoid SSR issues with browser-only APIs
const LLMAlchemy = dynamic(() => import('@/components/game/LLMAlchemy'), {
  ssr: false,
  loading: () => (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center">
      <div className="text-white text-xl">Loading game...</div>
    </div>
  )
});

export default function GamePage() {
  const { user, loading } = useSupabase();

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white text-xl">Loading game...</div>
      </div>
    );
  }

  return <LLMAlchemy />;
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\game\page.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\components\auth\SupabaseProvider.tsx ===== 
'use client'

import { createContext, useContext, useEffect, useState, useMemo, useCallback } from 'react'
import { createClient } from '@/lib/supabase-client'
import { User } from '@supabase/supabase-js'
import { User as DBUser, getOrCreateAnonymousUser, getDailyCount } from '@/lib/supabase-client'

interface SupabaseContextType {
  user: User | null
  dbUser: DBUser | null
  dailyCount: number
  loading: boolean
  signInAnonymously: () => Promise<void>
  signOut: () => Promise<void>
  refreshDailyCount: () => Promise<void>
}

const SupabaseContext = createContext<SupabaseContextType | undefined>(undefined)

export function SupabaseProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [dbUser, setDbUser] = useState<DBUser | null>(null)
  const [dailyCount, setDailyCount] = useState<number>(0)
  const [loading, setLoading] = useState(true)
  
  // Memoize supabase client to prevent recreation on every render
  const supabase = useMemo(() => createClient(), [])

  const refreshDailyCount = useCallback(async () => {
    if (user) {
      try {
        const count = await getDailyCount(supabase, user.id)
        setDailyCount(count)
      } catch (error) {
        console.error('Error refreshing daily count:', error)
      }
    }
  }, [user, supabase])

  const signInAnonymously = useCallback(async () => {
    try {
      setLoading(true)
      const dbUser = await getOrCreateAnonymousUser(supabase)
      if (dbUser) {
        setDbUser(dbUser)
        
        // Get the session to get the user ID for daily count
        const { data: { session } } = await supabase.auth.getSession()
        if (session?.user) {
          const count = await getDailyCount(supabase, session.user.id)
          setDailyCount(count)
        }
      }
    } catch (error) {
      console.error('❌ Error signing in anonymously:', error)
    } finally {
      setLoading(false)
    }
  }, [supabase])

  const signOut = useCallback(async () => {
    try {
      await supabase.auth.signOut()
      setUser(null)
      setDbUser(null)
      setDailyCount(0)
    } catch (error) {
      console.error('Error signing out:', error)
    }
  }, [supabase])

  useEffect(() => {
    let mounted = true
    
    // Get initial session
    const getInitialSession = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession()
        
        if (!mounted) return
        
        setUser(session?.user || null)
        
        if (session?.user) {
          // Get or create DB user record
          const dbUser = await getOrCreateAnonymousUser(supabase)
          if (mounted) {
            setDbUser(dbUser)
            // Get daily count
            if (dbUser) {
              const count = await getDailyCount(supabase, session.user.id)
              if (mounted) setDailyCount(count)
            }
          }
        } else {
          // Auto-create anonymous user on first visit
          await signInAnonymously()
        }
      } catch (error) {
        console.error('❌ Error getting initial session:', error)
      } finally {
        if (mounted) setLoading(false)
      }
    }

    getInitialSession()

    // Listen for auth changes - only set user, don't create DB records here
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (!mounted) return
        
        if (event === 'SIGNED_IN' && session?.user) {
          setUser(session.user)
          
          // Get DB user and daily count for newly signed in user
          const dbUser = await getOrCreateAnonymousUser(supabase)
          if (mounted) {
            setDbUser(dbUser)
            if (dbUser) {
              const count = await getDailyCount(supabase, session.user.id)
              if (mounted) setDailyCount(count)
            }
          }
        } else if (event === 'SIGNED_OUT') {
          setUser(null)
          setDbUser(null)
          setDailyCount(0)
        }
        
        if (mounted) setLoading(false)
      }
    )

    return () => {
      mounted = false
      subscription.unsubscribe()
    }
  }, [supabase, signInAnonymously])

  const value = {
    user,
    dbUser,
    dailyCount,
    loading,
    signInAnonymously,
    signOut,
    refreshDailyCount,
  }

  return (
    <SupabaseContext.Provider value={value}>
      {children}
    </SupabaseContext.Provider>
  )
}

export function useSupabase() {
  const context = useContext(SupabaseContext)
  if (context === undefined) {
    throw new Error('useSupabase must be used within a SupabaseProvider')
  }
  return context
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\components\auth\SupabaseProvider.tsx ===== 
 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\supabase-client.ts ===== 
import { createBrowserClient } from '@supabase/ssr'

// Types for our database schema
export interface User {
  id: string
  email?: string | null
  created_at: string
  is_anonymous: boolean
  subscription_status: 'free' | 'premium'
  subscription_ends_at?: string | null
}

export interface UserSession {
  id: string
  user_id: string
  date: string
  daily_count: number
  created_at: string
  updated_at: string
}

export interface GameState {
  id: string
  user_id: string
  game_mode: 'science' | 'creative'
  elements: any[]
  end_elements: any[]
  combinations: Record<string, string | null>
  achievements: any[]
  updated_at: string
}

export interface DiscoveredElement {
  user_id: string
  element_name: string
  discovered_at: string
}

// Browser client for client-side operations
export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}

// Helper functions for common database operations
export async function getOrCreateAnonymousUser(supabase: any): Promise<User | null> {
  try {
    // First try to get current user
    const { data: { user } } = await supabase.auth.getUser()
    
    if (user) {
      // Get user record from our database
      const { data: dbUser } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single()
      
      if (dbUser) {
        return dbUser
      }
    }

    // Create anonymous user
    const { data, error } = await supabase.auth.signInAnonymously()
    
    if (error) {
      console.error('Error creating anonymous user:', error)
      return null
    }

    // Create user record in our database
    const newUser = {
      id: data.user.id,
      email: null,
      is_anonymous: true,
      subscription_status: 'free' as const,
      subscription_ends_at: null
    }

    const { data: dbUser, error: dbError } = await supabase
      .from('users')
      .insert([newUser])
      .select()
      .single()

    if (dbError) {
      console.error('Error creating user record:', dbError)
      return null
    }

    return dbUser

  } catch (error) {
    console.error('Error in getOrCreateAnonymousUser:', error)
    return null
  }
}

export async function getDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    const { data, error } = await supabase
      .from('user_sessions')
      .select('daily_count')
      .eq('user_id', userId)
      .eq('date', today)
      .single()
    
    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
      console.error('Error getting daily count:', error)
      return 0
    }
    
    return data?.daily_count || 0
  } catch (error) {
    console.error('Error in getDailyCount:', error)
    return 0
  }
}

export async function incrementDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    // Use upsert to handle both insert and update
    const { data, error } = await supabase
      .from('user_sessions')
      .upsert({
        user_id: userId,
        date: today,
        daily_count: 1
      }, {
        onConflict: 'user_id,date',
        ignoreDuplicates: false
      })
      .select()
      .single()

    if (error) {
      // If upsert failed, try to increment existing record
      const { data: incrementData, error: incrementError } = await supabase.rpc('increment_daily_count', {
        p_user_id: userId
      })

      if (incrementError) {
        console.error('Error incrementing daily count:', incrementError)
        return 0
      }

      return incrementData || 1
    }

    return data?.daily_count || 1
  } catch (error) {
    console.error('Error in incrementDailyCount:', error)
    return 0
  }
}

export async function saveGameState(supabase: any, userId: string, gameState: Partial<GameState>): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('game_states')
      .upsert({
        user_id: userId,
        ...gameState,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,game_mode'
      })

    if (error) {
      console.error('Error saving game state:', error)
      return false
    }

    return true
  } catch (error) {
    console.error('Error in saveGameState:', error)
    return false
  }
}

export async function loadGameState(supabase: any, userId: string, gameMode: string): Promise<GameState | null> {
  try {
    const { data, error } = await supabase
      .from('game_states')
      .select('*')
      .eq('user_id', userId)
      .eq('game_mode', gameMode)
      .single()

    if (error && error.code !== 'PGRST116') {
      console.error('Error loading game state:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('Error in loadGameState:', error)
    return null
  }
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\supabase-client.ts ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\supabase.ts ===== 
import { createBrowserClient } from '@supabase/ssr'
import { createServerClient } from '@supabase/ssr'
import { NextRequest, NextResponse } from 'next/server'
import { cookies } from 'next/headers'

// Types for our database schema
export interface User {
  id: string
  email?: string | null
  created_at: string
  is_anonymous: boolean
  subscription_status: 'free' | 'premium'
  subscription_ends_at?: string | null
}

export interface UserSession {
  id: string
  user_id: string
  date: string
  daily_count: number
  created_at: string
  updated_at: string
}

export interface GameState {
  id: string
  user_id: string
  game_mode: 'science' | 'creative'
  elements: any[]
  end_elements: any[]
  combinations: Record<string, string | null>
  achievements: any[]
  updated_at: string
}

export interface DiscoveredElement {
  user_id: string
  element_name: string
  discovered_at: string
}

// Browser client for client-side operations
export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}

// Server client for API routes
export async function createServerSupabaseClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          cookieStore.set({ name, value, ...options })
        },
        remove(name: string, options: any) {
          cookieStore.delete({ name, ...options })
        },
      },
    }
  )
}

// Middleware client for request handling
export function createMiddlewareClient(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: any) {
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  return { supabase, response }
}

// Helper functions for common database operations
export async function getOrCreateAnonymousUser(supabase: any): Promise<User | null> {
  try {
    // First try to get current user
    const { data: { user } } = await supabase.auth.getUser()
    
    if (user) {
      // Get user record from our database
      const { data: dbUser } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single()
      
      if (dbUser) {
        return dbUser
      }
    }

    // Create anonymous user
    const { data, error } = await supabase.auth.signInAnonymously()
    
    if (error) {
      console.error('Error creating anonymous user:', error)
      return null
    }

    // Create user record in our database
    const newUser = {
      id: data.user.id,
      email: null,
      is_anonymous: true,
      subscription_status: 'free' as const,
      subscription_ends_at: null
    }

    const { data: dbUser, error: dbError } = await supabase
      .from('users')
      .insert([newUser])
      .select()
      .single()

    if (dbError) {
      console.error('Error creating user record:', dbError)
      return null
    }

    return dbUser

  } catch (error) {
    console.error('Error in getOrCreateAnonymousUser:', error)
    return null
  }
}

export async function getDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    const { data, error } = await supabase
      .from('user_sessions')
      .select('daily_count')
      .eq('user_id', userId)
      .eq('date', today)
      .single()
    
    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
      console.error('Error getting daily count:', error)
      return 0
    }
    
    return data?.daily_count || 0
  } catch (error) {
    console.error('Error in getDailyCount:', error)
    return 0
  }
}

export async function incrementDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    // Use upsert to handle both insert and update
    const { data, error } = await supabase
      .from('user_sessions')
      .upsert({
        user_id: userId,
        date: today,
        daily_count: 1
      }, {
        onConflict: 'user_id,date',
        ignoreDuplicates: false
      })
      .select()
      .single()

    if (error) {
      // If upsert failed, try to increment existing record
      const { data: incrementData, error: incrementError } = await supabase.rpc('increment_daily_count', {
        p_user_id: userId
      })

      if (incrementError) {
        console.error('Error incrementing daily count:', incrementError)
        return 0
      }

      return incrementData || 1
    }

    return data?.daily_count || 1
  } catch (error) {
    console.error('Error in incrementDailyCount:', error)
    return 0
  }
}

export async function saveGameState(supabase: any, userId: string, gameState: Partial<GameState>): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('game_states')
      .upsert({
        user_id: userId,
        ...gameState,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,game_mode'
      })

    if (error) {
      console.error('Error saving game state:', error)
      return false
    }

    return true
  } catch (error) {
    console.error('Error in saveGameState:', error)
    return false
  }
}

export async function loadGameState(supabase: any, userId: string, gameMode: string): Promise<GameState | null> {
  try {
    const { data, error } = await supabase
      .from('game_states')
      .select('*')
      .eq('user_id', userId)
      .eq('game_mode', gameMode)
      .single()

    if (error && error.code !== 'PGRST116') {
      console.error('Error loading game state:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('Error in loadGameState:', error)
    return null
  }
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\supabase.ts ===== 
 
 
