===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\consolidate-files.bat ===== 
@echo off
setlocal enabledelayedexpansion

:: Prompt user for search pattern
echo File Consolidator - Combines multiple files into one text file
echo.
set /p "pattern=Enter file pattern (e.g., *.txt, *.java, main.*, *.*): "

:: Ask whether to exclude media files (only for wildcard patterns)
set "excludeMedia=false"
echo.
if "%pattern%"=="*.*" (
    set /p "choice=Do you want to exclude common media files (jpg, png, mp3, etc)? [Y/N]: "
    if /I "!choice!"=="Y" set "excludeMedia=true"
) else (
    :: Check if pattern ends with .* (but not *.*)
    set "checkPattern=%pattern%"
    if "!checkPattern:~-2!"==".*" (
        set /p "choice=Do you want to exclude common media files? [Y/N]: "
        if /I "!choice!"=="Y" set "excludeMedia=true"
    )
)

:: Define media extensions to exclude
set "mediaExt=.png .jpg .jpeg .gif .ico .bmp .tiff .tif .svg .webp"
set "mediaExt=!mediaExt! .mp4 .mp3 .wav .avi .mkv .mov .flac .ogg .m4a .wma"
set "mediaExt=!mediaExt! .zip .rar .7z .tar .gz .exe .dll .bin .iso"
set "mediaExt=!mediaExt! .pdf .doc .docx .xls .xlsx .ppt .pptx"

:: Output filename
set "outputFile=combined_output.txt"

:: Remove existing output file
if exist "%outputFile%" del "%outputFile%"

:: Count files
set "fileCount=0"
set "skippedCount=0"

echo.
echo Processing files matching pattern: %pattern%
echo.

:: Process matching files
for /R %%F in (%pattern%) do (
    set "ext=%%~xF"
    set "includeFile=true"
    
    :: Skip if it's the output file itself
    if /I "%%~nxF"=="%outputFile%" set "includeFile=false"
    
    :: Check if we should exclude this file type
    if /I "!excludeMedia!"=="true" if "!includeFile!"=="true" (
        for %%M in (%mediaExt%) do (
            if /I "%%~xF"=="%%M" (
                set "includeFile=false"
                set /a skippedCount+=1
            )
        )
    )
    
    :: Add file to output
    if "!includeFile!"=="true" (
        echo Processing: %%~nxF
        echo ===== START: %%F ===== >> "%outputFile%"
        type "%%F" >> "%outputFile%" 2>nul
        echo. >> "%outputFile%"
        echo ===== END: %%F ===== >> "%outputFile%"
        echo. >> "%outputFile%"
        echo. >> "%outputFile%"
        set /a fileCount+=1
    )
)

:: Summary
echo.
echo ========================================
echo Done! Results saved to: %outputFile%
echo Files processed: !fileCount!
if !skippedCount! GTR 0 echo Files skipped (media/binary): !skippedCount!
echo ========================================
echo.
pause 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\consolidate-files.bat ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\globals.css ===== 
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\globals.css ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\layout.tsx ===== 
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SupabaseProvider } from "@/components/auth/SupabaseProvider";

const geist = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "LLM Alchemy - AI Element Combination Game",
  description: "Discover new elements by combining existing ones using the power of AI. Choose between Science mode for realistic combinations or Creative mode for imaginative results!",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geist.variable} ${geistMono.variable} antialiased`}
      >
        <SupabaseProvider>
          {children}
        </SupabaseProvider>
      </body>
    </html>
  );
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\layout.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\page.tsx ===== 
'use client'

import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { Sparkles, ArrowRight, X } from 'lucide-react';
import { useSupabase } from '@/components/auth/SupabaseProvider';
import { createClient, getGameProgress, resetGameState } from '@/lib/supabase-client';
import AuthModal from '@/components/auth/AuthModal';
import { 
  shouldShowUpgradePrompt, 
  shouldShowUpgradeButton, 
  upgradeAnonymousAccount, 
  upgradeAnonymousAccountWithGoogle,
  checkAndHandleUpgradeCallback
} from '@/lib/auth-utils';

interface GameProgress {
  science: { elements: number, endElements: number, achievements: number, lastPlayed?: string } | null;
  creative: { elements: number, endElements: number, achievements: number, lastPlayed?: string } | null;
  lastMode: 'science' | 'creative';
}

export default function Home() {
  const { user, dbUser, dailyCount, loading } = useSupabase();
  const router = useRouter();
  const [progress, setProgress] = useState<GameProgress | null>(null);
  const [showResetModal, setShowResetModal] = useState(false);
  const [resetAchievements, setResetAchievements] = useState(false);
  const [selectedMode, setSelectedMode] = useState<'science' | 'creative'>('science');
  const [showApiKeyModal, setShowApiKeyModal] = useState(false);
  const [userApiKey, setUserApiKey] = useState<string>('');
  const [selectedModel, setSelectedModel] = useState<'flash' | 'pro'>('flash');
  const [tempApiKey, setTempApiKey] = useState<string>('');
  const [isValidatingKey, setIsValidatingKey] = useState<boolean>(false);
  const [toast, setToast] = useState<string>('');
  
  // Authentication state
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [authModalMode, setAuthModalMode] = useState<'login' | 'register'>('login');
  const [showUpgradeBenefits, setShowUpgradeBenefits] = useState(false);
  const [isUpgrading, setIsUpgrading] = useState(false);
  
  // Payment state
  const [isCreatingPayment, setIsCreatingPayment] = useState(false);

  // Show toast function
  const showToast = (message: string) => {
    setToast(message);
    setTimeout(() => setToast(''), 3000);
  };

  // API key validation function
  const validateApiKey = async (apiKey: string): Promise<boolean> => {
    if (!apiKey.trim()) return false;
    
    setIsValidatingKey(true);
    try {
      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          prompt: 'Test validation. Respond with just: {"result": "test", "emoji": "✅", "color": "#00FF00", "rarity": "common", "reasoning": "validation test", "tags": []}',
          gameMode: 'science',
          apiKey: apiKey,
          useProModel: false
        })
      });

      if (response.ok) {
        const result = await response.json();
        return !result.error;
      }
      return false;
    } catch (error) {
      console.error('API key validation error:', error);
      return false;
    } finally {
      setIsValidatingKey(false);
    }
  };

  // Load API key from localStorage on mount
  useEffect(() => {
    const savedApiKey = localStorage.getItem('llm-alchemy-api-key');
    const savedModel = localStorage.getItem('llm-alchemy-model') as 'flash' | 'pro';
    
    if (savedApiKey) {
      setUserApiKey(savedApiKey);
    }
    if (savedModel && (savedModel === 'flash' || savedModel === 'pro')) {
      setSelectedModel(savedModel);
    }
  }, []);

  // Check for upgrade callback on mount
  useEffect(() => {
    const handleUpgradeCallback = async () => {
      const wasUpgraded = await checkAndHandleUpgradeCallback();
      if (wasUpgraded) {
        showToast('Account upgraded! Your progress has been saved.');
      }
    };
    
    handleUpgradeCallback();
  }, []);

  // Authentication handlers
  const handleAuthSuccess = () => {
    setShowAuthModal(false);
    showToast('Welcome! You can now purchase tokens and subscriptions.');
  };

  const handleUpgradeAccount = async () => {
    if (!user || !dbUser) return;
    
    setIsUpgrading(true);
    const result = await upgradeAnonymousAccountWithGoogle(user.id);
    
    if (result.success) {
      showToast(result.message);
    } else {
      showToast(result.message);
      setIsUpgrading(false);
    }
  };

  const handleShowAuth = (mode: 'login' | 'register' = 'login', showBenefits = false) => {
    setAuthModalMode(mode);
    setShowUpgradeBenefits(showBenefits);
    setShowAuthModal(true);
  };

  // Payment handlers
  const handleStripePayment = async (productId: string) => {
    if (isAnonymous) {
      // Show auth modal first for anonymous users
      handleShowAuth('register', true);
      return;
    }

    setIsCreatingPayment(true);
    try {
      const response = await fetch('/api/stripe/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Payment creation failed');
      }

      // Redirect to Stripe Checkout
      if (result.url) {
        window.location.href = result.url;
      } else {
        throw new Error('No checkout URL received');
      }

    } catch (error: any) {
      showToast(error.message || 'Payment failed');
    } finally {
      setIsCreatingPayment(false);
    }
  };

  // Check if user should see upgrade prompts
  const isAnonymous = dbUser?.is_anonymous || false;
  const shouldShowUpgrade = shouldShowUpgradeButton(dailyCount, 5, isAnonymous);
  const shouldShowUpgradePromptNow = shouldShowUpgradePrompt(dailyCount, 5, isAnonymous);

  // Save API key to localStorage when it changes
  useEffect(() => {
    if (userApiKey) {
      localStorage.setItem('llm-alchemy-api-key', userApiKey);
      localStorage.setItem('llm-alchemy-model', selectedModel);
    } else {
      localStorage.removeItem('llm-alchemy-api-key');
      localStorage.removeItem('llm-alchemy-model');
    }
  }, [userApiKey, selectedModel]);

  // Load game progress when user is available
  useEffect(() => {
    const loadProgress = async () => {
      if (user) {
        const supabase = createClient();
        const gameProgress = await getGameProgress(supabase, user.id);
        setProgress(gameProgress);
      }
    };

    loadProgress();
  }, [user]);

  // Refresh progress when page becomes visible (returning from game)
  useEffect(() => {
    const handleVisibilityChange = async () => {
      if (!document.hidden && user) {
        const supabase = createClient();
        const gameProgress = await getGameProgress(supabase, user.id);
        setProgress(gameProgress);
      }
    };

    const handleFocus = async () => {
      if (user) {
        const supabase = createClient();
        const gameProgress = await getGameProgress(supabase, user.id);
        setProgress(gameProgress);
      }
    };

    // Listen for page visibility changes and window focus
    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('focus', handleFocus);

    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('focus', handleFocus);
    };
  }, [user]);

  const hasAnyProgress = progress && (progress.science || progress.creative);

  const handleContinueGame = () => {
    if (hasAnyProgress && progress) {
      // Go to game with last played mode
      router.push(`/game?mode=${progress.lastMode}`);
    } else {
      // No progress, start new game in science mode
      router.push('/game?mode=science');
    }
  };

  const handleResetMode = (gameMode: 'science' | 'creative') => {
    setSelectedMode(gameMode);
    setShowResetModal(true);
  };

  const confirmReset = async () => {
    if (user) {
      const supabase = createClient();
      await resetGameState(supabase, user.id, selectedMode, resetAchievements);
      setShowResetModal(false);
      setResetAchievements(false);
      // Refresh progress display
      const gameProgress = await getGameProgress(supabase, user.id);
      setProgress(gameProgress);
    }
  };

  const formatElementCount = (count: number) => {
    return count === 0 ? 'None' : `${count} element${count === 1 ? '' : 's'}`;
  };

  if (loading) {
    return (
      <main className="min-h-screen bg-gray-900 text-white flex items-center justify-center">
        <div className="text-xl">Loading...</div>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4">
      <div className="max-w-lg w-full text-center">
        <div className="flex items-center justify-center gap-3 mb-8">
          <Sparkles className="text-yellow-400" size={48} />
          <h1 className="text-5xl font-bold">LLM Alchemy</h1>
        </div>
        
        <p className="text-lg text-gray-300 mb-8">
          Combine elements to discover new ones using AI.
        </p>

        {/* Progress Display */}
        {hasAnyProgress && (
          <div className="bg-gray-800/50 rounded-lg p-6 mb-6 text-left">
            <h3 className="text-lg font-semibold mb-4 text-center">Your Progress</h3>
            
            <div className="space-y-3">
              {progress?.science && (
                <div className="flex justify-between items-center py-2 px-3 bg-blue-600/20 rounded">
                  <div className="flex items-center gap-2">
                    <span className="font-medium">
                      <span className="hidden sm:inline">🧪 </span>Science
                    </span>
                    <span className="text-xs text-gray-400">|</span>
                    <span className="text-sm text-gray-300">
                      {progress.science.elements} elements
                      {progress.science.endElements > 0 && `, ${progress.science.endElements} end`}
                    </span>
                  </div>
                  <button
                    onClick={() => handleResetMode('science')}
                    className="text-red-400 hover:text-red-300 transition-colors text-lg"
                    title="Reset Science Mode"
                  >
                    ❌
                  </button>
                </div>
              )}
              
              {progress?.creative && (
                <div className="flex justify-between items-center py-2 px-3 bg-purple-600/20 rounded">
                  <div className="flex items-center gap-2">
                    <span className="font-medium">
                      <span className="hidden sm:inline">🎨 </span>Creative
                    </span>
                    <span className="text-xs text-gray-400">|</span>
                    <span className="text-sm text-gray-300">
                      {progress.creative.elements} elements
                    </span>
                  </div>
                  <button
                    onClick={() => handleResetMode('creative')}
                    className="text-red-400 hover:text-red-300 transition-colors text-lg"
                    title="Reset Creative Mode"
                  >
                    ❌
                  </button>
                </div>
              )}
            </div>
          </div>
        )}
        
        {/* Single Action Button */}
        <div className="space-y-4">
          <button 
            onClick={handleContinueGame}
            className="flex items-center justify-center gap-2 w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold py-4 px-8 rounded-lg transition-all transform hover:scale-105"
          >
            {hasAnyProgress ? 'Continue Game' : 'New Game'}
            <ArrowRight size={20} />
          </button>
          
          <div className="text-sm text-gray-400">
            Free to play • 50 combinations per day
          </div>
          
          {/* Authentication / Account Status */}
          <div className="flex justify-center">
            {isAnonymous ? (
              <button
                onClick={() => handleShowAuth('register', shouldShowUpgrade)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors text-sm ${
                  shouldShowUpgrade 
                    ? 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-medium' 
                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300 hover:text-white'
                }`}
              >
                <span>👤</span>
                <span>{shouldShowUpgrade ? 'Upgrade Account' : 'Create Account'}</span>
              </button>
            ) : (
              <div className="flex items-center gap-2 px-4 py-2 bg-green-600/20 rounded-lg text-green-400 text-sm">
                <span>✓</span>
                <span>Signed in as {dbUser?.display_name || dbUser?.email}</span>
              </div>
            )}
          </div>
          
          {/* Payment Buttons for Authenticated Users */}
          {!isAnonymous && dbUser && (
            <div className="mt-6 p-4 bg-gray-800/50 rounded-lg">
              <h3 className="text-lg font-semibold mb-4 text-center">Get More Tokens</h3>
              <div className="grid grid-cols-2 gap-3 mb-4">
                <button
                  onClick={() => handleStripePayment('tokens_100')}
                  disabled={isCreatingPayment}
                  className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white font-medium py-3 px-4 rounded-lg transition-all text-sm"
                >
                  {isCreatingPayment ? 'Processing...' : '100 tokens - €0.40'}
                </button>
                <button
                  onClick={() => handleStripePayment('tokens_500')}
                  disabled={isCreatingPayment}
                  className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white font-medium py-3 px-4 rounded-lg transition-all text-sm"
                >
                  {isCreatingPayment ? 'Processing...' : '500 tokens - €1.80'}
                </button>
                <button
                  onClick={() => handleStripePayment('tokens_1000')}
                  disabled={isCreatingPayment}
                  className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white font-medium py-3 px-4 rounded-lg transition-all text-sm"
                >
                  {isCreatingPayment ? 'Processing...' : '1000 tokens - €3.50'}
                </button>
                <button
                  onClick={() => handleStripePayment('subscription_monthly')}
                  disabled={isCreatingPayment}
                  className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white font-medium py-3 px-4 rounded-lg transition-all text-sm"
                >
                  {isCreatingPayment ? 'Processing...' : 'Monthly - €5.99'}
                </button>
              </div>
              <div className="text-xs text-gray-400 text-center">
                Current balance: {dbUser.token_balance || 0} tokens
              </div>
            </div>
          )}

          {/* Quick Sign In for returning users */}
          {isAnonymous && (
            <div className="flex justify-center">
              <button
                onClick={() => handleShowAuth('login', false)}
                className="text-sm text-gray-400 hover:text-gray-300 transition-colors"
              >
                Already have an account? Sign in
              </button>
            </div>
          )}
          
          {/* API Key Button - More subtle */}
          <div className="flex justify-center">
            <button
              onClick={() => {
                setTempApiKey(userApiKey);
                setShowApiKeyModal(true);
              }}
              className="flex items-center gap-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors text-sm text-gray-300 hover:text-white"
            >
              <span>🔑</span>
              <span>{userApiKey ? 'Update API Key' : 'Use Your Own API Key'}</span>
            </button>
          </div>
          
          {userApiKey && (
            <div className="text-xs text-green-400 mt-2">
              ✓ Using your OpenRouter API key • Unlimited combinations
            </div>
          )}
        </div>
      </div>

      {/* API Key Modal */}
      {showApiKeyModal && (
        <div 
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowApiKeyModal(false);
            }
          }}
        >
          <div className="bg-gray-800 rounded-xl p-6 max-w-md w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold">API Key Settings</h3>
              <button
                onClick={() => setShowApiKeyModal(false)}
                className="p-2 hover:bg-gray-700 rounded-full transition-colors"
              >
                <X size={20} />
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  OpenRouter API Key
                </label>
                <input
                  type="password"
                  value={tempApiKey}
                  onChange={(e) => setTempApiKey(e.target.value)}
                  placeholder="sk-or-..."
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
                />
                <p className="text-xs text-gray-400 mt-1">
                  Use your own API key to play without limits
                </p>
              </div>
              
              {tempApiKey && (
                <div>
                  <label className="block text-sm font-medium mb-2">
                    Model Selection
                  </label>
                  <div className="space-y-2">
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        value="flash"
                        checked={selectedModel === 'flash'}
                        onChange={(e) => setSelectedModel(e.target.value as 'flash' | 'pro')}
                        className="text-purple-500"
                      />
                      <span>Gemini Flash 2.5 (Faster, Cheaper)</span>
                    </label>
                    <label className="flex items-center gap-2 cursor-pointer">
                      <input
                        type="radio"
                        value="pro"
                        checked={selectedModel === 'pro'}
                        onChange={(e) => setSelectedModel(e.target.value as 'flash' | 'pro')}
                        className="text-purple-500"
                      />
                      <span>Gemini Pro 2.5 (Better Quality)</span>
                    </label>
                  </div>
                </div>
              )}
              
              <div className="flex gap-2 justify-end mt-6">
                <button
                  onClick={() => setShowApiKeyModal(false)}
                  className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={async () => {
                    if (tempApiKey.trim()) {
                      // Validate API key before saving
                      const isValid = await validateApiKey(tempApiKey);
                      if (isValid) {
                        setUserApiKey(tempApiKey);
                        setShowApiKeyModal(false);
                      } else {
                        alert('Invalid API key. Please check your OpenRouter API key and try again.');
                        return;
                      }
                    } else {
                      // Allow clearing the API key
                      setUserApiKey('');
                      setShowApiKeyModal(false);
                    }
                  }}
                  disabled={isValidatingKey}
                  className={`px-4 py-2 rounded-lg transition-colors ${
                    isValidatingKey 
                      ? 'bg-gray-600 cursor-not-allowed' 
                      : 'bg-purple-600 hover:bg-purple-500'
                  }`}
                >
                  {isValidatingKey ? 'Validating...' : 'Save'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Reset Mode Confirmation Modal */}
      {showResetModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 rounded-xl p-6 max-w-sm w-full">
            <h3 className="text-xl font-bold mb-3">Reset Progress?</h3>
            <p className="text-gray-300 mb-4">
              Reset discovered elements in {selectedMode} mode?
            </p>
            
            <div className="mb-6">
              <label className="flex items-center gap-2 text-sm">
                <input 
                  type="checkbox"
                  checked={resetAchievements}
                  onChange={(e) => setResetAchievements(e.target.checked)}
                  className="rounded"
                />
                Reset achievements
              </label>
            </div>
            
            <div className="flex gap-3 justify-end">
              <button
                onClick={() => {
                  setShowResetModal(false);
                  setResetAchievements(false);
                }}
                className="px-4 py-2 bg-gray-600 hover:bg-gray-500 rounded transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={confirmReset}
                className="px-4 py-2 bg-red-600 hover:bg-red-500 rounded transition-colors font-medium"
              >
                Reset
              </button>
            </div>
          </div>
        </div>
      )}

      {/* AuthModal */}
      <AuthModal
        isOpen={showAuthModal}
        onClose={() => setShowAuthModal(false)}
        onSuccess={handleAuthSuccess}
        initialMode={authModalMode}
        showUpgradeBenefits={showUpgradeBenefits}
      />

      {/* Toast */}
      {toast && (
        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 px-4 py-2 rounded-lg z-50">
          {toast}
        </div>
      )}
    </main>
  );
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\page.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\api\generate\route.ts ===== 
import { NextRequest, NextResponse } from 'next/server';

const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OPENROUTER_URL = 'https://openrouter.ai/api/v1/chat/completions';

export async function POST(req: NextRequest) {
  try {
    const { prompt, gameMode, apiKey, useProModel } = await req.json();

    // Use custom API key if provided, otherwise use server's key
    const activeApiKey = apiKey || OPENROUTER_API_KEY;

    if (!activeApiKey) {
      console.error('No API key available');
      return NextResponse.json(
        { error: 'No API key configured' },
        { status: 500 }
      );
    }

    // Model selection logic:
    // - If custom API key: user can choose between Flash and Pro
    // - If no custom key: Flash for freemium, Pro for paying (with tokens)
    let model;
    let userType;
    let reason;
    
    if (apiKey) {
      // User has their own API key, use their preference
      model = useProModel ? 'google/gemini-2.5-pro' : 'google/gemini-2.5-flash';
      userType = 'API Key User';
      reason = `User preference (${useProModel ? 'Pro' : 'Flash'} selected)`;
    } else {
      // Server's API key: Flash for freemium, Pro for paying users
      model = useProModel ? 'google/gemini-2.5-pro' : 'google/gemini-2.5-flash';
      userType = useProModel ? 'Token User' : 'Freemium User';
      reason = useProModel ? 'Has tokens (Pro model)' : 'Daily limit user (Flash model)';
    }
    
    // Log model selection for debugging
    console.log(`[LLM-Alchemy API] User Type: ${userType} | Model: ${model} | Reason: ${reason}`);

    // Use standard text format for both models
    const messageContent = prompt;

    // Adjust max_tokens based on model - Pro needs more tokens due to reasoning mode
    const maxTokens = model.includes('gemini-2.5-pro') ? 1500 : 500;
    
    // Build request body with reasoning control for Pro model
    const requestBody: any = {
      model,
      messages: [
        {
          role: 'user',
          content: messageContent
        }
      ],
      temperature: 0.7,
      max_tokens: maxTokens,
      top_p: 0.9,
    };

    // Add reasoning control for Pro model to reduce costs
    if (model.includes('gemini-2.5-pro')) {
      requestBody.reasoning = {
        effort: 'low' // Uses ~20% of max_tokens for reasoning instead of default 80%
      };
    }

    const response = await fetch(OPENROUTER_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${activeApiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',
        'X-Title': 'LLM Alchemy Game',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenRouter API error:', response.status, errorText);
      return NextResponse.json(
        { error: `OpenRouter API error: ${response.status}` },
        { status: response.status }
      );
    }

    const data = await response.json();
    
    // Enhanced debugging for model comparison
    console.log(`[LLM-Alchemy API] Model used: ${model}`);
    console.log(`[LLM-Alchemy API] OpenRouter response:`, {
      model: data.model,
      usage: data.usage,
      hasChoices: !!data.choices,
      choicesLength: data.choices?.length
    });
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('Invalid response structure:', data);
      return NextResponse.json(
        { error: 'Invalid response from OpenRouter' },
        { status: 500 }
      );
    }

    const content = data.choices[0].message.content;
    const reasoning = data.choices[0].message.reasoning;
    
    // Log the raw content and reasoning for debugging differences between models
    console.log(`[LLM-Alchemy API] Raw response content for ${model}:`, content);
    if (reasoning) {
      console.log(`[LLM-Alchemy API] Reasoning tokens for ${model}:`, reasoning.substring(0, 200) + '...');
      console.log(`[LLM-Alchemy API] Reasoning length: ${reasoning.length} characters`);
    }
    
    // Parse the JSON response from the LLM
    let parsedResult;
    try {
      // Extract JSON from the response if it's wrapped in code blocks or other text
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        console.log(`[LLM-Alchemy API] Extracted JSON for ${model}:`, jsonMatch[0]);
        parsedResult = JSON.parse(jsonMatch[0]);
      } else {
        console.log(`[LLM-Alchemy API] Parsing content directly for ${model}`);
        parsedResult = JSON.parse(content);
      }
    } catch (parseError) {
      console.error(`[LLM-Alchemy API] Failed to parse ${model} response:`, content);
      console.error('Parse error:', parseError);
      
      // Fallback to null result
      return NextResponse.json({
        result: null,
        emoji: '❌',
        color: '#808080',
        rarity: 'common',
        reasoning: 'Failed to parse response',
        tags: [],
        isEndElement: false
      });
    }

    // Use emoji from LLM response directly (LLM instructed to avoid Asian characters)
    const validatedEmoji = parsedResult.emoji || '✨';

    // Validate the parsed result
    const validatedResult = {
      result: parsedResult.result || null,
      emoji: validatedEmoji,
      color: parsedResult.color || '#808080',
      rarity: parsedResult.rarity || 'common',
      reasoning: parsedResult.reasoning || '',
      tags: Array.isArray(parsedResult.tags) ? parsedResult.tags : [],
      isEndElement: parsedResult.isEndElement || false
    };

    return NextResponse.json(validatedResult);

  } catch (error) {
    console.error('Generation error:', error);
    
    // Check if it's a network error
    if (error instanceof TypeError && error.message.includes('fetch')) {
      return NextResponse.json(
        { error: 'Network error: Unable to connect to OpenRouter' },
        { status: 503 }
      );
    }
    
    return NextResponse.json(
      { error: 'Failed to generate combination' },
      { status: 500 }
    );
  }
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\api\generate\route.ts ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\api\stripe\checkout\route.ts ===== 
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { createServerSupabaseClient } from '@/lib/supabase';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-06-30.basil',
});

// Define our products
const PRODUCTS = {
  tokens_100: {
    name: '100 Tokens',
    amount: 40, // €0.40 in cents
    tokens: 100,
    description: 'Perfect for casual players',
  },
  tokens_500: {
    name: '500 Tokens',
    amount: 180, // €1.80 in cents
    tokens: 500,
    description: 'Great value for regular players',
  },
  tokens_1000: {
    name: '1000 Tokens',
    amount: 350, // €3.50 in cents
    tokens: 1000,
    description: 'For dedicated alchemists',
  },
  subscription_monthly: {
    name: 'Monthly Subscription',
    amount: 599, // €5.99 in cents
    tokens: 0,
    description: 'Unlimited combinations',
  },
};

export async function POST(req: NextRequest) {
  try {
    const { productId } = await req.json();

    if (!productId || !PRODUCTS[productId as keyof typeof PRODUCTS]) {
      return NextResponse.json(
        { error: 'Invalid product ID' },
        { status: 400 }
      );
    }

    // Get user from Supabase
    const supabase = await createServerSupabaseClient();
    const { data: { user }, error: authError } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    // Get user database record
    const { data: dbUser, error: dbError } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single();

    if (dbError || !dbUser) {
      return NextResponse.json(
        { error: 'User not found in database' },
        { status: 404 }
      );
    }

    // Check if user is anonymous (shouldn't be able to make payments)
    if (dbUser.is_anonymous) {
      return NextResponse.json(
        { error: 'Anonymous users cannot make payments. Please create an account first.' },
        { status: 403 }
      );
    }

    const product = PRODUCTS[productId as keyof typeof PRODUCTS];
    const isSubscription = productId === 'subscription_monthly';

    // Create Stripe checkout session
    const sessionConfig: Stripe.Checkout.SessionCreateParams = {
      payment_method_types: ['card', 'mobilepay'], // Include MobilePay for Danish users
      line_items: [
        {
          price_data: {
            currency: 'eur',
            product_data: {
              name: product.name,
              description: product.description,
            },
            unit_amount: product.amount,
            ...(isSubscription && {
              recurring: {
                interval: 'month',
              },
            }),
          },
          quantity: 1,
        },
      ],
      mode: isSubscription ? 'subscription' : 'payment',
      success_url: `${process.env.NEXT_PUBLIC_APP_URL}/payment/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/`,
      metadata: {
        userId: user.id,
        productId: productId,
        type: isSubscription ? 'subscription' : 'tokens',
        tokens: product.tokens.toString(),
      },
      customer_email: dbUser.email || undefined,
    };

    const session = await stripe.checkout.sessions.create(sessionConfig);

    // Create payment record in database
    const paymentType = isSubscription ? 'subscription' : 'tokens';
    const { data: paymentRecord, error: paymentError } = await supabase
      .rpc('create_stripe_payment', {
        p_user_id: user.id,
        p_stripe_session_id: session.id,
        p_amount: product.amount / 100, // Convert cents to euros
        p_currency: 'EUR',
        p_type: paymentType,
        p_tokens_granted: product.tokens,
        p_subscription_type: isSubscription ? 'monthly' : null,
        p_checkout_url: session.url,
        p_metadata: {
          stripe_session_id: session.id,
          product_id: productId,
          description: product.description,
        },
      });

    if (paymentError) {
      console.error('Error creating payment record:', paymentError);
      return NextResponse.json(
        { error: 'Failed to create payment record' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      sessionId: session.id,
      url: session.url,
      amount: product.amount / 100,
      description: product.description,
    });

  } catch (error) {
    console.error('Stripe checkout error:', error);
    
    if (error instanceof Error) {
      return NextResponse.json(
        { error: `Checkout creation failed: ${error.message}` },
        { status: 500 }
      );
    }
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\api\stripe\checkout\route.ts ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\api\stripe\webhook\route.ts ===== 
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { createServerSupabaseClient } from '@/lib/supabase';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-06-30.basil',
});

const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export async function POST(req: NextRequest) {
  try {
    const body = await req.text();
    const signature = req.headers.get('stripe-signature');

    if (!signature) {
      console.error('No Stripe signature found');
      return NextResponse.json(
        { error: 'No signature found' },
        { status: 400 }
      );
    }

    let event: Stripe.Event;

    try {
      event = stripe.webhooks.constructEvent(body, signature, endpointSecret);
    } catch (err) {
      console.error('Webhook signature verification failed:', err);
      return NextResponse.json(
        { error: 'Webhook signature verification failed' },
        { status: 400 }
      );
    }

    console.log(`[Stripe Webhook] Processing event: ${event.type}`);

    // Handle the event
    switch (event.type) {
      case 'checkout.session.completed':
        await handleCheckoutSessionCompleted(event.data.object as Stripe.Checkout.Session);
        break;
      
      case 'invoice.payment_succeeded':
        await handleInvoicePaymentSucceeded(event.data.object as Stripe.Invoice);
        break;
      
      case 'customer.subscription.updated':
        await handleSubscriptionUpdated(event.data.object as Stripe.Subscription);
        break;
      
      case 'customer.subscription.deleted':
        await handleSubscriptionDeleted(event.data.object as Stripe.Subscription);
        break;
      
      default:
        console.log(`[Stripe Webhook] Unhandled event type: ${event.type}`);
    }

    return NextResponse.json({ received: true });

  } catch (error) {
    console.error('Stripe webhook error:', error);
    return NextResponse.json(
      { error: 'Webhook processing failed' },
      { status: 500 }
    );
  }
}

async function handleCheckoutSessionCompleted(session: Stripe.Checkout.Session) {
  try {
    console.log(`[Webhook] Checkout session completed: ${session.id}`);
    
    const supabase = await createServerSupabaseClient();
    
    // Determine payment status
    const paymentStatus = session.payment_status === 'paid' ? 'paid' : 'pending';
    
    // Update payment record
    const { data: updateResult, error: updateError } = await supabase
      .rpc('update_stripe_payment_status', {
        p_stripe_session_id: session.id,
        p_stripe_payment_id: session.payment_intent as string,
        p_status: paymentStatus,
        p_stripe_customer_id: session.customer as string,
        p_webhook_data: {
          event_type: 'checkout.session.completed',
          session_id: session.id,
          payment_status: session.payment_status,
          amount_total: session.amount_total,
          currency: session.currency,
          customer: session.customer,
          metadata: session.metadata,
          timestamp: new Date().toISOString(),
        },
      });

    if (updateError) {
      console.error('Error updating payment status:', updateError);
      return;
    }

    if (!updateResult) {
      console.error(`Payment record not found for session: ${session.id}`);
      return;
    }

    console.log(`[Webhook] Successfully processed checkout session: ${session.id}`);
    
  } catch (error) {
    console.error('Error handling checkout session completed:', error);
  }
}

async function handleInvoicePaymentSucceeded(invoice: Stripe.Invoice) {
  try {
    console.log(`[Webhook] Invoice payment succeeded: ${invoice.id}`);
    
    // This handles recurring subscription payments
    if ((invoice as any).subscription && invoice.metadata?.userId) {
      const supabase = await createServerSupabaseClient();
      
      // Update subscription status and extend subscription period
      const { error: updateError } = await supabase
        .from('users')
        .update({
          subscription_status: 'premium',
          subscription_ends_at: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
        })
        .eq('id', invoice.metadata.userId);

      if (updateError) {
        console.error('Error updating subscription status:', updateError);
      } else {
        console.log(`[Webhook] Extended subscription for user: ${invoice.metadata.userId}`);
      }
    }
    
  } catch (error) {
    console.error('Error handling invoice payment succeeded:', error);
  }
}

async function handleSubscriptionUpdated(subscription: Stripe.Subscription) {
  try {
    console.log(`[Webhook] Subscription updated: ${subscription.id}`);
    
    const supabase = await createServerSupabaseClient();
    
    // Update subscription record
    const { error: updateError } = await supabase
      .from('subscriptions')
      .update({
        status: subscription.status,
        next_payment_date: (subscription as any).current_period_end ? new Date((subscription as any).current_period_end * 1000) : null,
        updated_at: new Date().toISOString(),
      })
      .eq('stripe_subscription_id', subscription.id);

    if (updateError) {
      console.error('Error updating subscription:', updateError);
    }
    
  } catch (error) {
    console.error('Error handling subscription updated:', error);
  }
}

async function handleSubscriptionDeleted(subscription: Stripe.Subscription) {
  try {
    console.log(`[Webhook] Subscription deleted: ${subscription.id}`);
    
    const supabase = await createServerSupabaseClient();
    
    // Update subscription record
    const { error: updateError } = await supabase
      .from('subscriptions')
      .update({
        status: 'canceled',
        canceled_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq('stripe_subscription_id', subscription.id);

    if (updateError) {
      console.error('Error updating canceled subscription:', updateError);
    }
    
    // Also update user's subscription status
    const { error: userUpdateError } = await supabase
      .from('users')
      .update({
        subscription_status: 'free',
        subscription_ends_at: null,
      })
      .eq('id', subscription.metadata?.userId);

    if (userUpdateError) {
      console.error('Error updating user subscription status:', userUpdateError);
    }
    
  } catch (error) {
    console.error('Error handling subscription deleted:', error);
  }
}

// Handle GET requests (for webhook verification)
export async function GET(req: NextRequest) {
  return NextResponse.json({ 
    message: 'Stripe webhook endpoint is active',
    timestamp: new Date().toISOString() 
  });
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\api\stripe\webhook\route.ts ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\auth\callback\page.tsx ===== 
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/lib/supabase-client';

export default function AuthCallback() {
  const [status, setStatus] = useState('Processing...');
  const router = useRouter();
  const supabase = createClient();

  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        // Get the URL parameters
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error('Auth callback error:', error);
          setStatus('Authentication failed. Redirecting...');
          setTimeout(() => router.push('/'), 3000);
          return;
        }

        if (data.session) {
          // User successfully authenticated
          setStatus('Authentication successful! Redirecting...');
          
          // Create or update user record in our database
          const { data: userData, error: userError } = await supabase
            .from('users')
            .upsert({
              id: data.session.user.id,
              email: data.session.user.email,
              display_name: data.session.user.user_metadata?.display_name || 
                           data.session.user.user_metadata?.full_name || 
                           data.session.user.email?.split('@')[0],
              avatar_url: data.session.user.user_metadata?.avatar_url,
              google_id: data.session.user.app_metadata?.provider === 'google' ? 
                        data.session.user.user_metadata?.sub : null,
              is_anonymous: false,
              email_verified: data.session.user.email_confirmed_at !== null,
              updated_at: new Date().toISOString()
            }, {
              onConflict: 'id'
            });

          if (userError) {
            console.error('User creation error:', userError);
          }

          // Redirect to home page
          setTimeout(() => router.push('/'), 1000);
        } else {
          setStatus('No session found. Redirecting...');
          setTimeout(() => router.push('/'), 3000);
        }
      } catch (error) {
        console.error('Callback processing error:', error);
        setStatus('An error occurred. Redirecting...');
        setTimeout(() => router.push('/'), 3000);
      }
    };

    handleAuthCallback();
  }, [router, supabase]);

  return (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center">
      <div className="bg-gray-800 rounded-xl p-8 text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent mx-auto mb-4"></div>
        <h2 className="text-xl font-bold text-white mb-2">Authentication</h2>
        <p className="text-gray-400">{status}</p>
      </div>
    </div>
  );
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\auth\callback\page.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\game\page.tsx ===== 
'use client';

import { useSupabase } from '@/components/auth/SupabaseProvider';
import dynamic from 'next/dynamic';

// Dynamic import to avoid SSR issues with browser-only APIs
const LLMAlchemy = dynamic(() => import('@/components/game/LLMAlchemy'), {
  ssr: false,
  loading: () => (
    <div className="min-h-screen bg-gray-900 flex items-center justify-center">
      <div className="text-white text-xl">Loading game...</div>
    </div>
  )
});

export default function GamePage() {
  const { user, loading } = useSupabase();

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white text-xl">Loading game...</div>
      </div>
    );
  }

  return <LLMAlchemy />;
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\game\page.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\app\payment\success\page.tsx ===== 
'use client';

import { useEffect, useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Sparkles, CheckCircle, ArrowRight, Home } from 'lucide-react';

function PaymentSuccessContent() {
  const [status, setStatus] = useState('Processing payment...');
  const [paymentDetails, setPaymentDetails] = useState<any>(null);
  const router = useRouter();
  const searchParams = useSearchParams();

  useEffect(() => {
    const checkPaymentStatus = async () => {
      try {
        // Get session ID from URL parameters
        const sessionId = searchParams.get('session_id');
        
        if (!sessionId) {
          setStatus('No session ID found');
          return;
        }

        // Since we're redirected here from Stripe, we can assume success
        // The webhook will handle the actual payment processing
        setStatus('Payment successful!');
        setPaymentDetails({
          sessionId: sessionId,
          message: 'Your payment has been processed successfully.',
        });

        // Redirect to home after 5 seconds
        setTimeout(() => {
          router.push('/');
        }, 5000);

      } catch (error) {
        console.error('Error checking payment status:', error);
        setStatus('Error verifying payment');
      }
    };

    checkPaymentStatus();
  }, [searchParams, router]);

  return (
    <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4">
      <div className="max-w-md w-full text-center">
        <div className="flex items-center justify-center gap-3 mb-8">
          <Sparkles className="text-yellow-400" size={48} />
          <h1 className="text-3xl font-bold">LLM Alchemy</h1>
        </div>

        <div className="bg-gray-800 rounded-xl p-8 mb-6">
          {status === 'Payment successful!' ? (
            <>
              <div className="flex justify-center mb-4">
                <CheckCircle className="text-green-400" size={64} />
              </div>
              <h2 className="text-2xl font-bold text-green-400 mb-4">
                Payment Successful!
              </h2>
              <p className="text-gray-300 mb-6">
                Thank you for your purchase. Your tokens have been added to your account 
                and your subscription has been activated.
              </p>
              <div className="space-y-4">
                <button
                  onClick={() => router.push('/game')}
                  className="w-full flex items-center justify-center gap-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium py-3 px-6 rounded-lg transition-all"
                >
                  <span>Start Playing</span>
                  <ArrowRight size={20} />
                </button>
                <button
                  onClick={() => router.push('/')}
                  className="w-full flex items-center justify-center gap-2 bg-gray-700 hover:bg-gray-600 text-white font-medium py-3 px-6 rounded-lg transition-all"
                >
                  <Home size={20} />
                  <span>Go Home</span>
                </button>
              </div>
            </>
          ) : (
            <>
              <div className="animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent mx-auto mb-4"></div>
              <h2 className="text-xl font-bold mb-2">Processing Payment</h2>
              <p className="text-gray-400">{status}</p>
            </>
          )}
        </div>

        <div className="text-sm text-gray-400">
          <p>You will be redirected to the home page in a few seconds.</p>
          <p className="mt-2">
            If you have any issues, please contact support at{' '}
            <a href="mailto:support@llmalchemy.com" className="text-purple-400 hover:text-purple-300">
              support@llmalchemy.com
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}

export default function PaymentSuccess() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4">
        <div className="max-w-md w-full text-center">
          <div className="flex items-center justify-center gap-3 mb-8">
            <Sparkles className="text-yellow-400" size={48} />
            <h1 className="text-3xl font-bold">LLM Alchemy</h1>
          </div>
          <div className="bg-gray-800 rounded-xl p-8 mb-6">
            <div className="animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent mx-auto mb-4"></div>
            <h2 className="text-xl font-bold mb-2">Loading Payment Status</h2>
            <p className="text-gray-400">Please wait...</p>
          </div>
        </div>
      </div>
    }>
      <PaymentSuccessContent />
    </Suspense>
  );
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\app\payment\success\page.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\components\auth\AuthModal.tsx ===== 
'use client';

import React, { useState } from 'react';
import { X, Mail, Lock, User, Eye, EyeOff } from 'lucide-react';
import { createClient } from '@/lib/supabase-client';

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess?: () => void;
  initialMode?: 'login' | 'register';
  showUpgradeBenefits?: boolean;
}

export default function AuthModal({ 
  isOpen, 
  onClose, 
  onSuccess, 
  initialMode = 'login',
  showUpgradeBenefits = false 
}: AuthModalProps) {
  const [mode, setMode] = useState<'login' | 'register' | 'forgot'>(initialMode);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [displayName, setDisplayName] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const supabase = createClient();

  const handleEmailAuth = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    setSuccess('');

    try {
      if (mode === 'register') {
        const { data, error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: {
              display_name: displayName || email.split('@')[0],
            }
          }
        });

        if (error) throw error;

        if (data.user && !data.user.email_confirmed_at) {
          setSuccess('Please check your email for verification link!');
          setMode('login');
        } else {
          setSuccess('Account created successfully!');
          onSuccess?.();
        }
      } else if (mode === 'login') {
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password
        });

        if (error) throw error;

        setSuccess('Logged in successfully!');
        onSuccess?.();
        onClose();
      } else if (mode === 'forgot') {
        const { error } = await supabase.auth.resetPasswordForEmail(email, {
          redirectTo: `${window.location.origin}/auth/reset-password`
        });

        if (error) throw error;

        setSuccess('Password reset email sent!');
        setMode('login');
      }
    } catch (error: any) {
      setError(error.message || 'An error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleAuth = async () => {
    setIsLoading(true);
    setError('');

    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      });

      if (error) throw error;
    } catch (error: any) {
      setError(error.message || 'Google authentication failed');
      setIsLoading(false);
    }
  };

  const handleMagicLink = async () => {
    if (!email) {
      setError('Please enter your email address');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const { error } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: `${window.location.origin}/auth/callback`
        }
      });

      if (error) throw error;

      setSuccess('Magic link sent to your email!');
      setMode('login');
    } catch (error: any) {
      setError(error.message || 'Failed to send magic link');
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-xl p-6 max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold text-white">
            {mode === 'login' ? 'Sign In' : mode === 'register' ? 'Create Account' : 'Reset Password'}
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-700 rounded-full transition-colors"
          >
            <X size={20} className="text-gray-400" />
          </button>
        </div>

        {/* Upgrade Benefits */}
        {showUpgradeBenefits && (
          <div className="mb-6 p-4 bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-lg border border-purple-500/30">
            <h3 className="text-lg font-semibold text-white mb-2">🚀 Upgrade Benefits</h3>
            <ul className="text-sm text-gray-300 space-y-1">
              <li>• Cross-device game sync</li>
              <li>• Purchase tokens & subscriptions</li>
              <li>• Enhanced undo functionality</li>
              <li>• Priority customer support</li>
              <li>• Progress never lost</li>
            </ul>
          </div>
        )}

        {/* Error/Success Messages */}
        {error && (
          <div className="mb-4 p-3 bg-red-600/20 border border-red-600/50 rounded-lg">
            <p className="text-red-300 text-sm">{error}</p>
          </div>
        )}

        {success && (
          <div className="mb-4 p-3 bg-green-600/20 border border-green-600/50 rounded-lg">
            <p className="text-green-300 text-sm">{success}</p>
          </div>
        )}

        {/* Google Auth Button */}
        <button
          onClick={handleGoogleAuth}
          disabled={isLoading}
          className="w-full mb-4 p-3 bg-white hover:bg-gray-100 text-gray-800 rounded-lg font-medium transition-colors flex items-center justify-center gap-2 disabled:opacity-50"
        >
          <svg className="w-5 h-5" viewBox="0 0 24 24">
            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          Continue with Google
        </button>

        <div className="flex items-center gap-4 mb-4">
          <div className="flex-1 h-px bg-gray-600"></div>
          <span className="text-gray-400 text-sm">or</span>
          <div className="flex-1 h-px bg-gray-600"></div>
        </div>

        {/* Email Form */}
        <form onSubmit={handleEmailAuth} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Email Address
            </label>
            <div className="relative">
              <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your email"
                className="w-full pl-10 pr-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
                required
              />
            </div>
          </div>

          {mode === 'register' && (
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Display Name (Optional)
              </label>
              <div className="relative">
                <User className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={displayName}
                  onChange={(e) => setDisplayName(e.target.value)}
                  placeholder="How should we call you?"
                  className="w-full pl-10 pr-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
                />
              </div>
            </div>
          )}

          {mode !== 'forgot' && (
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Password
              </label>
              <div className="relative">
                <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Enter your password"
                  className="w-full pl-10 pr-10 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500"
                  required
                  minLength={6}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-3 text-gray-400 hover:text-gray-300"
                >
                  {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}
                </button>
              </div>
            </div>
          )}

          <button
            type="submit"
            disabled={isLoading}
            className="w-full p-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-medium transition-colors disabled:opacity-50"
          >
            {isLoading ? 'Loading...' : 
             mode === 'login' ? 'Sign In' : 
             mode === 'register' ? 'Create Account' : 
             'Send Reset Link'}
          </button>
        </form>

        {/* Magic Link Option */}
        <div className="mt-4">
          <button
            onClick={handleMagicLink}
            disabled={isLoading}
            className="w-full p-2 text-sm text-purple-400 hover:text-purple-300 transition-colors"
          >
            Or send me a magic link (passwordless)
          </button>
        </div>

        {/* Mode Switching */}
        <div className="mt-6 text-center text-sm">
          {mode === 'login' ? (
            <>
              <span className="text-gray-400">Don't have an account? </span>
              <button
                onClick={() => setMode('register')}
                className="text-purple-400 hover:text-purple-300"
              >
                Create one
              </button>
              <span className="text-gray-400"> or </span>
              <button
                onClick={() => setMode('forgot')}
                className="text-purple-400 hover:text-purple-300"
              >
                Forgot password?
              </button>
            </>
          ) : mode === 'register' ? (
            <>
              <span className="text-gray-400">Already have an account? </span>
              <button
                onClick={() => setMode('login')}
                className="text-purple-400 hover:text-purple-300"
              >
                Sign in
              </button>
            </>
          ) : (
            <>
              <span className="text-gray-400">Remember your password? </span>
              <button
                onClick={() => setMode('login')}
                className="text-purple-400 hover:text-purple-300"
              >
                Sign in
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\components\auth\AuthModal.tsx ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\components\auth\SupabaseProvider.tsx ===== 
'use client'

import { createContext, useContext, useEffect, useState, useMemo, useCallback } from 'react'
import { createClient } from '@/lib/supabase-client'
import { User } from '@supabase/supabase-js'
import { User as DBUser, getOrCreateAnonymousUser, getDailyCount, getTokenBalance } from '@/lib/supabase-client'

interface SupabaseContextType {
  user: User | null
  dbUser: DBUser | null
  dailyCount: number
  tokenBalance: number
  loading: boolean
  signInAnonymously: () => Promise<void>
  signOut: () => Promise<void>
  refreshDailyCount: () => Promise<void>
  refreshTokenBalance: () => Promise<void>
}

const SupabaseContext = createContext<SupabaseContextType | undefined>(undefined)

export function SupabaseProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [dbUser, setDbUser] = useState<DBUser | null>(null)
  const [dailyCount, setDailyCount] = useState<number>(0)
  const [tokenBalance, setTokenBalance] = useState<number>(0)
  const [loading, setLoading] = useState(true)
  
  // Memoize supabase client to prevent recreation on every render
  const supabase = useMemo(() => createClient(), [])

  const refreshDailyCount = useCallback(async () => {
    if (user) {
      try {
        const count = await getDailyCount(supabase, user.id)
        setDailyCount(count)
      } catch (error) {
        console.error('Error refreshing daily count:', error)
      }
    }
  }, [user, supabase])

  const refreshTokenBalance = useCallback(async () => {
    if (user) {
      try {
        const balance = await getTokenBalance(supabase, user.id)
        setTokenBalance(balance)
      } catch (error) {
        console.error('Error refreshing token balance:', error)
      }
    }
  }, [user, supabase])

  const signInAnonymously = useCallback(async () => {
    try {
      setLoading(true)
      const dbUser = await getOrCreateAnonymousUser(supabase)
      if (dbUser) {
        setDbUser(dbUser)
        
        // Get the session to get the user ID for daily count
        const { data: { session } } = await supabase.auth.getSession()
        if (session?.user) {
          const count = await getDailyCount(supabase, session.user.id)
          setDailyCount(count)
        }
      }
    } catch (error) {
      console.error('❌ Error signing in anonymously:', error)
    } finally {
      setLoading(false)
    }
  }, [supabase])

  const signOut = useCallback(async () => {
    try {
      await supabase.auth.signOut()
      setUser(null)
      setDbUser(null)
      setDailyCount(0)
      setTokenBalance(0)
    } catch (error) {
      console.error('Error signing out:', error)
    }
  }, [supabase])

  useEffect(() => {
    let mounted = true
    let isInitializing = false
    
    const initializeAuth = async () => {
      if (isInitializing) return
      isInitializing = true
      
      try {
        // Get current session
        const { data: { session } } = await supabase.auth.getSession()
        
        if (!mounted) return
        
        if (session?.user) {
          // User already exists
          setUser(session.user)
          
          // Get DB user record
          const dbUser = await getOrCreateAnonymousUser(supabase)
          if (mounted && dbUser) {
            setDbUser(dbUser)
            const count = await getDailyCount(supabase, session.user.id)
            const balance = await getTokenBalance(supabase, session.user.id)
            if (mounted) {
              setDailyCount(count)
              setTokenBalance(balance)
            }
          }
        } else {
          // No session, create anonymous user
          const dbUser = await getOrCreateAnonymousUser(supabase)
          if (mounted && dbUser) {
            setDbUser(dbUser)
            // Get the new session
            const { data: { session: newSession } } = await supabase.auth.getSession()
            if (newSession?.user && mounted) {
              setUser(newSession.user)
              const count = await getDailyCount(supabase, newSession.user.id)
              const balance = await getTokenBalance(supabase, newSession.user.id)
              if (mounted) {
                setDailyCount(count)
                setTokenBalance(balance)
              }
            }
          }
        }
      } catch (error) {
        console.error('Auth initialization error:', error)
      } finally {
        if (mounted) {
          setLoading(false)
          isInitializing = false
        }
      }
    }

    // Initialize auth
    initializeAuth()

    // Listen for auth state changes (but don't trigger during initialization)
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (!mounted || isInitializing) return
        
        try {
          if (event === 'SIGNED_OUT') {
            setUser(null)
            setDbUser(null)
            setDailyCount(0)
            setTokenBalance(0)
          } else if (event === 'SIGNED_IN' && session?.user) {
            setUser(session.user)
            
            // Get or create DB user
            const dbUser = await getOrCreateAnonymousUser(supabase)
            if (mounted && dbUser) {
              setDbUser(dbUser)
              const count = await getDailyCount(supabase, session.user.id)
              const balance = await getTokenBalance(supabase, session.user.id)
              if (mounted) {
                setDailyCount(count)
                setTokenBalance(balance)
              }
            }
          }
        } catch (error) {
          console.error('Auth state change error:', error)
        } finally {
          if (mounted) setLoading(false)
        }
      }
    )

    return () => {
      mounted = false
      subscription.unsubscribe()
    }
  }, [supabase])

  const value = {
    user,
    dbUser,
    dailyCount,
    tokenBalance,
    loading,
    signInAnonymously,
    signOut,
    refreshDailyCount,
    refreshTokenBalance,
  }

  return (
    <SupabaseContext.Provider value={value}>
      {children}
    </SupabaseContext.Provider>
  )
}

export function useSupabase() {
  const context = useContext(SupabaseContext)
  if (context === undefined) {
    throw new Error('useSupabase must be used within a SupabaseProvider')
  }
  return context
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\components\auth\SupabaseProvider.tsx ===== 
 

 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\auth-utils.ts ===== 
import { createClient } from '@/lib/supabase-client';

export interface AccountUpgradeResult {
  success: boolean;
  message: string;
  user?: any;
}

export async function upgradeAnonymousAccount(
  anonymousUserId: string,
  newUserData: {
    email: string;
    password: string;
    displayName?: string;
  }
): Promise<AccountUpgradeResult> {
  const supabase = createClient();
  
  try {
    // First, create the new registered account
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: newUserData.email,
      password: newUserData.password,
      options: {
        data: {
          display_name: newUserData.displayName || newUserData.email.split('@')[0],
        }
      }
    });

    if (signUpError) {
      return { success: false, message: signUpError.message };
    }

    if (!signUpData.user) {
      return { success: false, message: 'Failed to create account' };
    }

    // Wait for the user to be created in our database
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Migrate the anonymous user data to the new account
    const { data: migrationResult, error: migrationError } = await supabase
      .rpc('migrate_anonymous_data', {
        p_anonymous_user_id: anonymousUserId,
        p_registered_user_id: signUpData.user.id
      });

    if (migrationError) {
      console.error('Migration error:', migrationError);
      return { 
        success: false, 
        message: 'Account created but data migration failed. Please contact support.' 
      };
    }

    if (!migrationResult) {
      return { 
        success: false, 
        message: 'Failed to migrate your game progress. Please contact support.' 
      };
    }

    return {
      success: true,
      message: 'Account upgraded successfully! Your progress has been saved.',
      user: signUpData.user
    };

  } catch (error: any) {
    console.error('Account upgrade error:', error);
    return {
      success: false,
      message: 'An unexpected error occurred during account upgrade.'
    };
  }
}

export async function upgradeAnonymousAccountWithGoogle(
  anonymousUserId: string
): Promise<AccountUpgradeResult> {
  const supabase = createClient();
  
  try {
    // Store the anonymous user ID in localStorage for later migration
    localStorage.setItem('llm-alchemy-anonymous-user-id', anonymousUserId);
    
    // Initiate Google OAuth
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/auth/callback?upgrade=true`
      }
    });

    if (error) {
      return { success: false, message: error.message };
    }

    // OAuth redirect will handle the rest
    return { success: true, message: 'Redirecting to Google...' };

  } catch (error: any) {
    console.error('Google upgrade error:', error);
    return {
      success: false,
      message: 'Failed to initiate Google authentication.'
    };
  }
}

export async function checkAndHandleUpgradeCallback(): Promise<boolean> {
  const supabase = createClient();
  const urlParams = new URLSearchParams(window.location.search);
  const isUpgrade = urlParams.get('upgrade') === 'true';
  
  if (!isUpgrade) return false;

  const anonymousUserId = localStorage.getItem('llm-alchemy-anonymous-user-id');
  if (!anonymousUserId) return false;

  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error || !user) {
      console.error('Failed to get user after OAuth:', error);
      return false;
    }

    // Migrate the anonymous user data
    const { data: migrationResult, error: migrationError } = await supabase
      .rpc('migrate_anonymous_data', {
        p_anonymous_user_id: anonymousUserId,
        p_registered_user_id: user.id
      });

    if (migrationError) {
      console.error('Migration error after OAuth:', migrationError);
      return false;
    }

    // Clean up
    localStorage.removeItem('llm-alchemy-anonymous-user-id');
    
    return true;

  } catch (error) {
    console.error('OAuth upgrade callback error:', error);
    return false;
  }
}

export async function getUserAuthStatus(userId: string) {
  const supabase = createClient();
  
  try {
    const { data, error } = await supabase
      .rpc('get_user_auth_status', { p_user_id: userId });
    
    if (error) {
      console.error('Error getting auth status:', error);
      return null;
    }
    
    return data?.[0] || null;
  } catch (error) {
    console.error('Error getting auth status:', error);
    return null;
  }
}

export function shouldShowUpgradePrompt(
  dailyCount: number,
  dailyLimit: number,
  isAnonymous: boolean
): boolean {
  return isAnonymous && dailyCount >= dailyLimit;
}

export function shouldShowUpgradeButton(
  dailyCount: number,
  dailyLimit: number,
  isAnonymous: boolean
): boolean {
  return isAnonymous && dailyCount >= Math.floor(dailyLimit * 0.8); // Show at 80% of limit
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\auth-utils.ts ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\supabase-client.ts ===== 
import { createBrowserClient } from '@supabase/ssr'

// Types for our database schema
export interface User {
  id: string
  email?: string | null
  created_at: string
  is_anonymous: boolean
  subscription_status: 'free' | 'premium'
  subscription_ends_at?: string | null
  token_balance?: number
  display_name?: string | null
  avatar_url?: string | null
  google_id?: string | null
  email_verified?: boolean
  upgraded_from_anonymous?: boolean
  anonymous_data_migrated?: boolean
}

export interface UserSession {
  id: string
  user_id: string
  date: string
  daily_count: number
  created_at: string
  updated_at: string
}

export interface GameState {
  id: string
  user_id: string
  game_mode: 'science' | 'creative'
  elements: any[]
  end_elements: any[]
  combinations: Record<string, string | null>
  achievements: any[]
  updated_at: string
}

export interface DiscoveredElement {
  user_id: string
  element_name: string
  discovered_at: string
}

// Browser client for client-side operations
export function createClient() {
  // Clean implementation without debug logs
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  
  if (!supabaseUrl || !supabaseKey) {
    throw new Error('Missing Supabase environment variables')
  }
  
  return createBrowserClient(supabaseUrl, supabaseKey)
}

// Helper functions for common database operations
export async function getOrCreateAnonymousUser(supabase: any): Promise<User | null> {
  try {
    // First try to get current user
    const { data: { user } } = await supabase.auth.getUser()
    
    if (user) {
      // Get user record from our database
      const { data: dbUser } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single()
      
      if (dbUser) {
        return dbUser
      }
    }

    // Create anonymous user
    const { data, error } = await supabase.auth.signInAnonymously()
    
    if (error) {
      console.error('Error creating anonymous user:', error)
      return null
    }

    // Create user record in our database
    const newUser = {
      id: data.user.id,
      email: null,
      is_anonymous: true,
      subscription_status: 'free' as const,
      subscription_ends_at: null
    }

    const { data: dbUser, error: dbError } = await supabase
      .from('users')
      .insert([newUser])
      .select()
      .single()

    if (dbError) {
      console.error('Error creating user record:', dbError)
      return null
    }

    return dbUser

  } catch (error) {
    console.error('Error in getOrCreateAnonymousUser:', error)
    return null
  }
}

export async function getDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    const { data, error } = await supabase
      .from('user_sessions')
      .select('daily_count')
      .eq('user_id', userId)
      .eq('date', today)
      .single()
    
    if (error) {
      // Handle different error types gracefully
      if (error.code === 'PGRST116') {
        // No rows returned - user hasn't used any combinations today
        return 0
      } else if (error.code === 'PGRST301' || error.message?.includes('406')) {
        // RLS policy issues - return 0 and continue silently
        console.warn('Database access restricted, continuing with fallback')
        return 0
      } else {
        console.error('Error getting daily count:', error)
        return 0
      }
    }
    
    return data?.daily_count || 0
  } catch (error) {
    console.error('Error in getDailyCount:', error)
    return 0
  }
}

export async function incrementDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    // Use the database function to atomically increment
    const { data, error } = await supabase.rpc('increment_daily_count', {
      p_user_id: userId
    })

    if (error) {
      console.error('Error incrementing daily count:', error)
      return 0
    }

    return data || 1
  } catch (error) {
    console.error('Error in incrementDailyCount:', error)
    return 0
  }
}

export async function decrementDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    // Use the database function to atomically decrement
    const { data, error } = await supabase.rpc('decrement_daily_count', {
      p_user_id: userId
    })

    if (error) {
      console.error('Error decrementing daily count:', error)
      return 0
    }

    return data || 0
  } catch (error) {
    console.error('Error in decrementDailyCount:', error)
    return 0
  }
}

export async function saveGameState(supabase: any, userId: string, gameState: Partial<GameState>): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('game_states')
      .upsert({
        user_id: userId,
        ...gameState,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,game_mode'
      })

    if (error) {
      console.error('Error saving game state:', error)
      return false
    }

    return true
  } catch (error) {
    console.error('Error in saveGameState:', error)
    return false
  }
}

export async function loadGameState(supabase: any, userId: string, gameMode: string): Promise<GameState | null> {
  try {
    const { data, error } = await supabase
      .from('game_states')
      .select('*')
      .eq('user_id', userId)
      .eq('game_mode', gameMode)
      .single()

    if (error) {
      // Handle different error types gracefully
      if (error.code === 'PGRST116') {
        // No rows returned - no saved state for this mode
        return null
      } else if (error.code === 'PGRST301' || error.message?.includes('406')) {
        // RLS policy issues - return null and continue silently
        console.warn('Database access restricted for game state, continuing without persistence')
        return null
      } else {
        console.error('Error loading game state:', error)
        return null
      }
    }

    return data
  } catch (error) {
    console.error('Error in loadGameState:', error)
    return null
  }
}

export async function getGameProgress(supabase: any, userId: string): Promise<{
  science: { elements: number, endElements: number, achievements: number, lastPlayed?: string } | null,
  creative: { elements: number, endElements: number, achievements: number, lastPlayed?: string } | null,
  lastMode: 'science' | 'creative'
}> {
  try {
    const { data, error } = await supabase
      .from('game_states')
      .select('*')
      .eq('user_id', userId)

    if (error && error.code !== 'PGRST116') {
      console.error('Error getting game progress:', error)
      return { science: null, creative: null, lastMode: 'science' }
    }

    if (!data || data.length === 0) {
      return { science: null, creative: null, lastMode: 'science' }
    }

    const progress = {
      science: null as any,
      creative: null as any,
      lastMode: 'science' as 'science' | 'creative'
    }

    // Find the most recently updated mode
    let latestUpdate = 0
    
    data.forEach((gameState: GameState) => {
      const updatedAt = new Date(gameState.updated_at).getTime()
      if (updatedAt > latestUpdate) {
        latestUpdate = updatedAt
        progress.lastMode = gameState.game_mode
      }

      const modeProgress = {
        elements: Array.isArray(gameState.elements) ? gameState.elements.length : 0,
        endElements: Array.isArray(gameState.end_elements) ? gameState.end_elements.length : 0,
        achievements: Array.isArray(gameState.achievements) ? gameState.achievements.length : 0,
        lastPlayed: gameState.updated_at
      }

      if (gameState.game_mode === 'science') {
        progress.science = modeProgress
      } else if (gameState.game_mode === 'creative') {
        progress.creative = modeProgress
      }
    })

    return progress
  } catch (error) {
    console.error('Error in getGameProgress:', error)
    return { science: null, creative: null, lastMode: 'science' }
  }
}

export async function resetGameState(supabase: any, userId: string, gameMode: string, includeAchievements: boolean = false): Promise<boolean> {
  try {
    if (includeAchievements) {
      // Delete the entire game state record
      const { error } = await supabase
        .from('game_states')
        .delete()
        .eq('user_id', userId)
        .eq('game_mode', gameMode)

      if (error) {
        console.error('Error deleting game state:', error)
        return false
      }
    } else {
      // Get existing achievements first
      const existingState = await loadGameState(supabase, userId, gameMode)
      const existingAchievements = existingState?.achievements || []
      
      // Reset but keep achievements
      const { error } = await supabase
        .from('game_states')
        .upsert({
          user_id: userId,
          game_mode: gameMode,
          elements: [],
          end_elements: [],
          combinations: {},
          achievements: existingAchievements, // Preserve existing achievements
          updated_at: new Date().toISOString()
        }, {
          onConflict: 'user_id,game_mode'
        })

      if (error) {
        console.error('Error resetting game state:', error)
        return false
      }
    }

    return true
  } catch (error) {
    console.error('Error in resetGameState:', error)
    return false
  }
}

// Token-related functions
export async function getTokenBalance(supabase: any, userId: string): Promise<number> {
  try {
    const { data, error } = await supabase.rpc('get_token_balance', {
      p_user_id: userId
    })

    if (error) {
      console.error('Error getting token balance:', error)
      return 0
    }

    return data || 0
  } catch (error) {
    console.error('Error in getTokenBalance:', error)
    return 0
  }
}

export async function consumeToken(supabase: any, userId: string): Promise<boolean> {
  try {
    const { data, error } = await supabase.rpc('consume_token', {
      p_user_id: userId
    })

    if (error) {
      console.error('Error consuming token:', error)
      return false
    }

    return data || false
  } catch (error) {
    console.error('Error in consumeToken:', error)
    return false
  }
}

export async function addTokens(supabase: any, userId: string, tokens: number): Promise<number> {
  try {
    const { data, error } = await supabase.rpc('add_tokens', {
      p_user_id: userId,
      p_tokens: tokens
    })

    if (error) {
      console.error('Error adding tokens:', error)
      return 0
    }

    return data || 0
  } catch (error) {
    console.error('Error in addTokens:', error)
    return 0
  }
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\supabase-client.ts ===== 
 
 
===== START: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\supabase.ts ===== 
import { createBrowserClient } from '@supabase/ssr'
import { createServerClient } from '@supabase/ssr'
import { NextRequest, NextResponse } from 'next/server'
import { cookies } from 'next/headers'

// Types for our database schema
export interface User {
  id: string
  email?: string | null
  created_at: string
  is_anonymous: boolean
  subscription_status: 'free' | 'premium'
  subscription_ends_at?: string | null
}

export interface UserSession {
  id: string
  user_id: string
  date: string
  daily_count: number
  created_at: string
  updated_at: string
}

export interface GameState {
  id: string
  user_id: string
  game_mode: 'science' | 'creative'
  elements: any[]
  end_elements: any[]
  combinations: Record<string, string | null>
  achievements: any[]
  updated_at: string
}

export interface DiscoveredElement {
  user_id: string
  element_name: string
  discovered_at: string
}

// Browser client for client-side operations
export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}

// Server client for API routes
export async function createServerSupabaseClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          cookieStore.set({ name, value, ...options })
        },
        remove(name: string, options: any) {
          cookieStore.delete({ name, ...options })
        },
      },
    }
  )
}

// Middleware client for request handling
export function createMiddlewareClient(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: any) {
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  return { supabase, response }
}

// Helper functions for common database operations
export async function getOrCreateAnonymousUser(supabase: any): Promise<User | null> {
  try {
    // First try to get current user
    const { data: { user } } = await supabase.auth.getUser()
    
    if (user) {
      // Get user record from our database
      const { data: dbUser } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single()
      
      if (dbUser) {
        return dbUser
      }
    }

    // Create anonymous user
    const { data, error } = await supabase.auth.signInAnonymously()
    
    if (error) {
      console.error('Error creating anonymous user:', error)
      return null
    }

    // Create user record in our database
    const newUser = {
      id: data.user.id,
      email: null,
      is_anonymous: true,
      subscription_status: 'free' as const,
      subscription_ends_at: null
    }

    const { data: dbUser, error: dbError } = await supabase
      .from('users')
      .insert([newUser])
      .select()
      .single()

    if (dbError) {
      console.error('Error creating user record:', dbError)
      return null
    }

    return dbUser

  } catch (error) {
    console.error('Error in getOrCreateAnonymousUser:', error)
    return null
  }
}

export async function getDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    const { data, error } = await supabase
      .from('user_sessions')
      .select('daily_count')
      .eq('user_id', userId)
      .eq('date', today)
      .single()
    
    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
      console.error('Error getting daily count:', error)
      return 0
    }
    
    return data?.daily_count || 0
  } catch (error) {
    console.error('Error in getDailyCount:', error)
    return 0
  }
}

export async function incrementDailyCount(supabase: any, userId: string): Promise<number> {
  try {
    const today = new Date().toISOString().split('T')[0]
    
    // Use upsert to handle both insert and update
    const { data, error } = await supabase
      .from('user_sessions')
      .upsert({
        user_id: userId,
        date: today,
        daily_count: 1
      }, {
        onConflict: 'user_id,date',
        ignoreDuplicates: false
      })
      .select()
      .single()

    if (error) {
      // If upsert failed, try to increment existing record
      const { data: incrementData, error: incrementError } = await supabase.rpc('increment_daily_count', {
        p_user_id: userId
      })

      if (incrementError) {
        console.error('Error incrementing daily count:', incrementError)
        return 0
      }

      return incrementData || 1
    }

    return data?.daily_count || 1
  } catch (error) {
    console.error('Error in incrementDailyCount:', error)
    return 0
  }
}

export async function saveGameState(supabase: any, userId: string, gameState: Partial<GameState>): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('game_states')
      .upsert({
        user_id: userId,
        ...gameState,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,game_mode'
      })

    if (error) {
      console.error('Error saving game state:', error)
      return false
    }

    return true
  } catch (error) {
    console.error('Error in saveGameState:', error)
    return false
  }
}

export async function loadGameState(supabase: any, userId: string, gameMode: string): Promise<GameState | null> {
  try {
    const { data, error } = await supabase
      .from('game_states')
      .select('*')
      .eq('user_id', userId)
      .eq('game_mode', gameMode)
      .single()

    if (error && error.code !== 'PGRST116') {
      console.error('Error loading game state:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('Error in loadGameState:', error)
    return null
  }
}
 
===== END: C:\ai\LLM-Alchemy\llm-alchemy\src\lib\supabase.ts ===== 
 
 
